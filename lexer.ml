# 1 "lexer.mll"
 
(* Poling: Proof Of Linearizability Generator 
 * Poling is built on top of CAVE and shares the same license with CAVE 
 * See LICENSE.txt for license.
 * Contact: He Zhu, Department of Computer Science, Purdue University
 * Email: zhu103@purdue.edu
 *)	
(******************************************************************************)
(*   __               ___     CAVE: Concurrent Algorithm VErifier             *)
(*  /     /\  \    / |        Copyright (c) 2010, Viktor Vafeiadis            *)
(* |     /--\  \  /  |---                                                     *)
(*  \__ /    \  \/   |___     See LICENSE.txt for license.                    *)
(*                                                                            *)
(******************************************************************************)
open Lexing
open Parser

(* association list of keywords *)
let keyword_ht = Hashtbl.create 71

let _ =
  List.iter (fun (s,tok) -> Hashtbl.replace keyword_ht s tok)
    ["_",           UNDERSCORE;
     "action",      ACTION;
     "as",          AS;
     "assume",      ASSUME;
     "break",       BREAK;
     "class",       CLASS;
     "comment",     COMMENT;
     "constructor", CONSTRUCTOR;
     "continue",    CONTINUE;
     "dispose",     DISPOSE;
     "do",          DO;
     "else",        ELSE;
     "emp",         EMPTY;
     "ensures",     ENSURES;
     "if",          IF;
     "interfere",   INTERFERE;
     "invariant",   INVARIANT;
     "let",         LET;
     "new",         NEW;
     "par",         PAR;
     "requires",    REQUIRES;
     "resource",    RESOURCE;
     "return",      RETURN;
     "then",        THEN;
     "void",        VOID;
     "when",        WHEN;
     "while",       WHILE;
     "with",        WITH;
     "true" ,       BOOL true;
     "false",       BOOL false;
     "NULL",        NAT 0;
		 "qualif",      QUALIF;
     "squalif",     SINGLE_QUALIF;
		 "purespec",    PURESPEC;
		 "effspec",     EFFSPEC;
		 "setspec",     SETDECL;	
		 "thread_desc", TDESC;
		]

(* To store the position of the beginning of a string and comment *)
let string_start_loc = ref Location.none;;
let comment_start_loc = ref [];;
let in_comment () = !comment_start_loc <> [];;

let lexbuf_stack = ref []

(* Update the current location with absolute line number. *)
let update_currentline lexbuf line =
  lexbuf.lex_curr_p <- { lexbuf.lex_curr_p with pos_lnum = line }

(* Update the current location with file name. *)
let update_fname lexbuf fname =
  lexbuf.lex_curr_p <- { lexbuf.lex_curr_p with pos_fname = fname }

let update_newline lexbuf =
  let pos = lexbuf.lex_curr_p in
  lexbuf.lex_curr_p <-
    { pos with 
        pos_lnum = pos.pos_lnum + 1;
        pos_bol = pos.pos_cnum; }

(* Initialize file name and starting position *)
let init lexbuf fname =
  Location.lexbuf := Some lexbuf;
  update_fname lexbuf fname;
  update_currentline lexbuf 1;
  lexbuf.lex_start_p <- lexbuf.lex_curr_p

(* Initialize file name and starting position *)
let init_fname fname =
  let lexbuf = Lexing.from_channel (open_in fname) in
  Location.lexbuf := Some lexbuf;
  update_fname lexbuf fname;
  update_currentline lexbuf 1;
  lexbuf.lex_start_p <- lexbuf.lex_curr_p;
  lexbuf

let init_stdin () =
  let lexbuf = Lexing.from_channel stdin in
  Location.lexbuf := Some lexbuf;
  update_fname lexbuf "<stdin>";
  update_currentline lexbuf 1;
  lexbuf.lex_start_p <- lexbuf.lex_curr_p;
  lexbuf

let parse_eof k = 
  match !lexbuf_stack with 
    | [] -> EOF
    | b::l -> 
        Location.lexbuf := Some b;
        lexbuf_stack := l;
        k b


# 119 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\215\255\216\255\117\000\113\000\192\000\083\000\003\000\
    \250\000\230\255\231\255\232\255\233\255\020\000\031\000\068\000\
    \035\000\080\000\085\000\106\000\241\255\242\255\243\255\244\255\
    \083\000\246\255\247\255\086\000\249\255\112\000\105\000\253\255\
    \254\255\001\000\255\255\251\255\140\000\004\000\252\255\239\255\
    \086\000\250\255\229\255\245\255\240\255\224\255\222\255\235\255\
    \226\255\228\255\225\255\076\001\223\255\151\001\217\255\008\002\
    \009\002\010\002\125\001\251\255\005\000\252\255\253\255\102\000\
    \112\000\255\255\254\255\015\002\252\255\237\001\254\255\006\000\
    \255\255\041\002\252\255\042\002\254\255\007\000\255\255\253\255\
    \046\002\047\002\048\002\242\000\253\255\254\255\008\000\255\255\
    ";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\040\000\035\000\035\000\034\000\040\000\
    \028\000\255\255\255\255\255\255\255\255\021\000\020\000\020\000\
    \019\000\018\000\017\000\040\000\255\255\255\255\255\255\255\255\
    \021\000\255\255\255\255\007\000\255\255\040\000\022\000\255\255\
    \255\255\000\000\255\255\255\255\255\255\003\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\037\000\255\255\035\000\255\255\255\255\
    \255\255\038\000\255\255\255\255\003\000\255\255\255\255\004\000\
    \004\000\255\255\255\255\255\255\255\255\002\000\255\255\000\000\
    \255\255\255\255\255\255\003\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\002\000\255\255\255\255\255\255\000\000\255\255\
    ";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\055\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\255\255\000\000\255\255\255\255\000\000\
    \000\000\255\255\000\000\000\000\036\000\255\255\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\255\255\000\000\055\000\
    \055\000\055\000\059\000\000\000\255\255\000\000\000\000\255\255\
    \255\255\000\000\000\000\068\000\000\000\255\255\000\000\255\255\
    \000\000\074\000\000\000\080\000\000\000\255\255\000\000\000\000\
    \080\000\080\000\080\000\084\000\000\000\000\000\255\255\000\000\
    ";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\032\000\034\000\034\000\032\000\033\000\038\000\061\000\
    \072\000\078\000\087\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \032\000\016\000\003\000\031\000\007\000\012\000\019\000\052\000\
    \025\000\021\000\011\000\013\000\028\000\024\000\010\000\030\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\018\000\020\000\015\000\017\000\014\000\050\000\
    \008\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\026\000\047\000\022\000\012\000\005\000\
    \047\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\027\000\029\000\023\000\009\000\255\255\
    \048\000\047\000\255\255\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\047\000\046\000\045\000\
    \044\000\043\000\042\000\035\000\041\000\066\000\038\000\054\000\
    \036\000\037\000\065\000\000\000\049\000\040\000\000\000\000\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\000\000\000\000\000\000\000\000\
    \004\000\056\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\039\000\000\000\000\000\000\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\000\000\000\000\087\000\000\000\000\000\086\000\
    \002\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\000\000\000\000\000\000\000\000\053\000\
    \000\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\000\000\000\000\000\000\
    \000\000\051\000\000\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\000\000\061\000\
    \000\000\000\000\060\000\000\000\255\255\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\063\000\
    \000\000\000\000\000\000\051\000\064\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\085\000\000\000\000\000\000\000\053\000\000\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \070\000\072\000\000\000\070\000\071\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\000\000\
    \000\000\000\000\054\000\057\000\054\000\000\000\000\000\070\000\
    \000\000\000\000\076\000\078\000\255\255\076\000\077\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\076\000\000\000\075\000\079\000\000\000\000\000\000\000\
    \079\000\082\000\079\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\056\000\056\000\056\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\062\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\081\000\000\000\
    \000\000\000\000\081\000\081\000\081\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\000\000\000\000\255\255\255\255\
    \255\255";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\033\000\000\000\000\000\037\000\060\000\
    \071\000\077\000\086\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\
    \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \015\000\015\000\003\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\017\000\017\000\018\000\
    \019\000\024\000\027\000\030\000\040\000\063\000\036\000\003\000\
    \030\000\036\000\064\000\255\255\014\000\029\000\255\255\255\255\
    \255\255\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\255\255\255\255\255\255\255\255\
    \004\000\003\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\029\000\255\255\255\255\255\255\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\255\255\255\255\083\000\255\255\255\255\083\000\
    \000\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\255\255\255\255\255\255\255\255\005\000\
    \255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\255\255\255\255\255\255\
    \255\255\008\000\255\255\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\003\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\255\255\058\000\
    \255\255\255\255\058\000\255\255\036\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\058\000\
    \255\255\255\255\255\255\051\000\058\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\083\000\255\255\255\255\255\255\053\000\255\255\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\055\000\056\000\057\000\055\000\056\000\057\000\
    \067\000\067\000\255\255\067\000\067\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\255\255\
    \255\255\255\255\055\000\056\000\057\000\255\255\255\255\067\000\
    \255\255\255\255\073\000\073\000\075\000\073\000\073\000\075\000\
    \080\000\081\000\082\000\080\000\081\000\082\000\255\255\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\073\000\255\255\073\000\075\000\255\255\255\255\255\255\
    \080\000\081\000\082\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\055\000\056\000\057\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\058\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\075\000\255\255\
    \255\255\255\255\080\000\081\000\082\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \055\000\056\000\057\000\255\255\255\255\255\255\255\255\067\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\073\000\075\000\255\255\255\255\255\255\080\000\081\000\
    \082\000";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
  __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 133 "lexer.mll"
            ( update_newline lexbuf; token lexbuf )
# 389 "lexer.ml"

  | 1 ->
# 134 "lexer.mll"
            ( token lexbuf )
# 394 "lexer.ml"

  | 2 ->
# 135 "lexer.mll"
            ( hash lexbuf )
# 399 "lexer.ml"

  | 3 ->
# 137 "lexer.mll"
   ( update_newline lexbuf; token lexbuf )
# 404 "lexer.ml"

  | 4 ->
# 138 "lexer.mll"
          ( comment_start_loc := [lexbuf.lex_curr_p];
            comment lexbuf;
            token lexbuf )
# 411 "lexer.ml"

  | 5 ->
# 141 "lexer.mll"
          ( POINTSTO )
# 416 "lexer.ml"

  | 6 ->
# 142 "lexer.mll"
          ( COMMA )
# 421 "lexer.ml"

  | 7 ->
# 143 "lexer.mll"
          ( LBRACE )
# 426 "lexer.ml"

  | 8 ->
# 144 "lexer.mll"
          ( LBRACKET )
# 431 "lexer.ml"

  | 9 ->
# 145 "lexer.mll"
          ( LPAREN )
# 436 "lexer.ml"

  | 10 ->
# 146 "lexer.mll"
          ( MINUSGREATER )
# 441 "lexer.ml"

  | 11 ->
# 147 "lexer.mll"
          ( RBRACE )
# 446 "lexer.ml"

  | 12 ->
# 148 "lexer.mll"
          ( RBRACKET )
# 451 "lexer.ml"

  | 13 ->
# 149 "lexer.mll"
          ( RPAREN )
# 456 "lexer.ml"

  | 14 ->
# 150 "lexer.mll"
          ( SEMI )
# 461 "lexer.ml"

  | 15 ->
# 151 "lexer.mll"
          ( AMPERAMPER )
# 466 "lexer.ml"

  | 16 ->
# 152 "lexer.mll"
          ( BARBAR )
# 471 "lexer.ml"

  | 17 ->
# 153 "lexer.mll"
          ( COLON )
# 476 "lexer.ml"

  | 18 ->
# 154 "lexer.mll"
          ( EQUAL )
# 481 "lexer.ml"

  | 19 ->
# 155 "lexer.mll"
                            ( UNARYOP(Lexing.lexeme lexbuf) )
# 486 "lexer.ml"

  | 20 ->
# 157 "lexer.mll"
                            ( INFIXOP1(Lexing.lexeme lexbuf) )
# 491 "lexer.ml"

  | 21 ->
# 158 "lexer.mll"
                            ( INFIXOP2(Lexing.lexeme lexbuf) )
# 496 "lexer.ml"

  | 22 ->
# 159 "lexer.mll"
                            ( INFIXOP3(Lexing.lexeme lexbuf) )
# 501 "lexer.ml"

  | 23 ->
# 160 "lexer.mll"
           ( STAR )
# 506 "lexer.ml"

  | 24 ->
# 161 "lexer.mll"
           ( DOT )
# 511 "lexer.ml"

  | 25 ->
# 162 "lexer.mll"
          ( TILDE )
# 516 "lexer.ml"

  | 26 ->
# 163 "lexer.mll"
          ( LBRACELESS )
# 521 "lexer.ml"

  | 27 ->
# 164 "lexer.mll"
           ( GREATERRBRACE )
# 526 "lexer.ml"

  | 28 ->
# 165 "lexer.mll"
          ( WILD )
# 531 "lexer.ml"

  | 29 ->
# 166 "lexer.mll"
          ( IN )
# 536 "lexer.ml"

  | 30 ->
# 167 "lexer.mll"
          ( UNION )
# 541 "lexer.ml"

  | 31 ->
# 168 "lexer.mll"
          ( CONCAT )
# 546 "lexer.ml"

  | 32 ->
# 169 "lexer.mll"
          ( REC )
# 551 "lexer.ml"

  | 33 ->
# 170 "lexer.mll"
          ( IMPLIES )
# 556 "lexer.ml"

  | 34 ->
# 171 "lexer.mll"
           ( NAT(int_of_string(Lexing.lexeme lexbuf)) )
# 561 "lexer.ml"

  | 35 ->
# 172 "lexer.mll"
           ( let s = Lexing.lexeme lexbuf in
             try Hashtbl.find keyword_ht s
             with Not_found -> IDENT(s) )
# 568 "lexer.ml"

  | 36 ->
# 175 "lexer.mll"
           ( QIDENT(Lexing.lexeme lexbuf) )
# 573 "lexer.ml"

  | 37 ->
# 176 "lexer.mll"
           ( FIDENT(Lexing.lexeme lexbuf) )
# 578 "lexer.ml"

  | 38 ->
# 177 "lexer.mll"
           ( let s = Lexing.lexeme lexbuf in
	     STRING (String.sub s 1 (String.length s - 2)) )
# 584 "lexer.ml"

  | 39 ->
# 179 "lexer.mll"
           ( parse_eof token )
# 589 "lexer.ml"

  | 40 ->
# 180 "lexer.mll"
      ( raise(Location.Parse_error 
		("Illegal character (" ^ Char.escaped (Lexing.lexeme_char lexbuf 0) ^ ").",
		 Location.mkloc(lexbuf.lex_start_p) (lexbuf.lex_curr_p))) )
# 596 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
  __ocaml_lex_comment_rec lexbuf 58
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 185 "lexer.mll"
         ( comment_start_loc := lexbuf.lex_curr_p :: !comment_start_loc;
           comment lexbuf )
# 608 "lexer.ml"

  | 1 ->
# 187 "lexer.mll"
         ( match !comment_start_loc with
             | [] -> assert false
             | [_] -> comment_start_loc := [];
             | _ :: l -> comment_start_loc := l; comment lexbuf )
# 616 "lexer.ml"

  | 2 ->
# 191 "lexer.mll"
        ( match !comment_start_loc with
            | [] -> assert false
            | loc :: _ -> comment_start_loc := [];
		raise(Location.Parse_error
			("Unterminated comment.",
			 Location.mkloc loc (lexbuf.lex_curr_p))) )
# 626 "lexer.ml"

  | 3 ->
# 197 "lexer.mll"
            ( update_newline lexbuf; comment lexbuf )
# 631 "lexer.ml"

  | 4 ->
# 198 "lexer.mll"
            ( comment lexbuf )
# 636 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and hash lexbuf =
  __ocaml_lex_hash_rec lexbuf 67
and __ocaml_lex_hash_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 202 "lexer.mll"
             ( update_newline lexbuf; token lexbuf)
# 647 "lexer.ml"

  | 1 ->
# 203 "lexer.mll"
             ( hash lexbuf)
# 652 "lexer.ml"

  | 2 ->
# 204 "lexer.mll"
             ( let s = Lexing.lexeme lexbuf in
               update_currentline lexbuf (int_of_string s - 1);
               file lexbuf )
# 659 "lexer.ml"

  | 3 ->
# 219 "lexer.mll"
      ( raise(Location.Parse_error 
		("Illegal character (" ^ Char.escaped (Lexing.lexeme_char lexbuf 0) ^ ") after #. Line number expected.",
		 Location.mkloc(lexbuf.lex_start_p) (lexbuf.lex_curr_p))) )
# 666 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_hash_rec lexbuf __ocaml_lex_state

and file lexbuf =
  __ocaml_lex_file_rec lexbuf 73
and __ocaml_lex_file_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 224 "lexer.mll"
             ( update_newline lexbuf; token lexbuf )
# 677 "lexer.ml"

  | 1 ->
# 225 "lexer.mll"
             ( file lexbuf )
# 682 "lexer.ml"

  | 2 ->
# 226 "lexer.mll"
             ( let n = Lexing.lexeme lexbuf in
               update_fname lexbuf (String.sub n 1 ((String.length n) - 2));
               endline lexbuf )
# 689 "lexer.ml"

  | 3 ->
# 229 "lexer.mll"
             ( endline lexbuf )
# 694 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_file_rec lexbuf __ocaml_lex_state

and endline lexbuf =
  __ocaml_lex_endline_rec lexbuf 83
and __ocaml_lex_endline_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 232 "lexer.mll"
             ( update_newline lexbuf; token lexbuf )
# 705 "lexer.ml"

  | 1 ->
# 233 "lexer.mll"
             ( parse_eof token )
# 710 "lexer.ml"

  | 2 ->
# 234 "lexer.mll"
             ( endline lexbuf )
# 715 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_endline_rec lexbuf __ocaml_lex_state

;;

# 236 "lexer.mll"
  (* trailer *)

# 724 "lexer.ml"
