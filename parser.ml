type token =
  | ACTION
  | AMPERAMPER
  | AS
  | ASSUME
  | BARBAR
  | BOOL of (bool)
  | BREAK
  | CLASS
  | COLON
  | COMMA
  | COMMENT
  | CONSTRUCTOR
  | CONTINUE
  | DISPOSE
  | DO
  | DOT
  | ELSE
  | EMPTY
  | ENSURES
  | EOF
  | EQUAL
  | IDENT of (string)
  | QIDENT of (string)
  | FIDENT of (string)
  | IF
  | INFIXOP1 of (string)
  | INFIXOP2 of (string)
  | INFIXOP3 of (string)
  | INTERFERE
  | INVARIANT
  | LBRACE
  | LBRACKET
  | LET
  | LPAREN
  | MINUSGREATER
  | NAT of (int)
  | NEW
  | PAR
  | POINTSTO
  | RBRACE
  | RBRACKET
  | REQUIRES
  | RESOURCE
  | RETURN
  | RPAREN
  | STRING of (string)
  | SEMI
  | STAR
  | THEN
  | TREE
  | UNARYOP of (string)
  | UNDERSCORE
  | VOID
  | WHEN
  | WHILE
  | WITH
  | QUALIF
  | SINGLE_QUALIF
  | SPEC
  | TILDE
  | LBRACELESS
  | GREATERRBRACE
  | WILD
  | IN
  | UNION
  | CONCAT
  | REC
  | PURESPEC
  | EFFSPEC
  | IMPLIES
  | SETDECL
  | TDESC

open Parsing;;
# 1 "parser.mly"

(* Poling: Proof Of Linearizability Generator 
 * Poling is built on top of CAVE and shares the same license with CAVE 
 * See LICENSE.txt for license.
 * Contact: He Zhu, Department of Computer Science, Purdue University
 * Email: zhu103@purdue.edu
 *)
(******************************************************************************)
(*   __               ___     CAVE: Concurrent Algorithm VErifier             *)
(*  /     /\  \    / |        Copyright (c) 2010, Viktor Vafeiadis            *)
(* |     /--\  \  /  |---                                                     *)
(*  \__ /    \  \/   |___     See LICENSE.txt for license.                    *)
(*                                                                            *)
(******************************************************************************)
open Misc
open Parsetree

let mkexp d = { pexp_desc = d; pexp_loc = Location.symbol_loc() }
let mkexp_ghost d = { pexp_desc = d; pexp_loc = Location.none }
let mkstm d = { pstm_desc = d; pstm_loc = Location.symbol_loc() }
let mkstm_ghost d = { pstm_desc = d; pstm_loc = Location.none }

(** // MCPA takes user specifications & qualifiers into verification *)
let mkqpat d =
  { pqual_pat_desc = d; pqual_pat_loc = Location.symbol_loc () }
let mkpredpat d =
  { ppredpat_desc = d; ppredpat_loc = Location.symbol_loc() }
let mkpredpatexp d =
  { ppredpatexp_desc = d; ppredpatexp_loc = Location.symbol_loc() }
(** // *)

let exp_one = mkexp_ghost (Pexp_num 1)

let mk_ref_params cel loc =
  let check_par = function
    | {pexp_desc = Pexp_ident i; pexp_loc=l} -> (i,l)
    | _ -> 
    raise(Location.Parse_error("Syntax error: Reference parameters must be variables.", loc)) in
  List.map check_par cel
  
let mk_indpred_params cel =
  let check_par = function
    | {pexp_desc = Pexp_ident i; pexp_loc=l} -> (i,l)
    | {pexp_loc = l} -> 
    raise(Location.Parse_error("Syntax error: Node parameters must be variables.", l)) in
  List.map check_par cel
 
(* implicitly called when no grammar rules apply *)
let parse_error _ =
  raise(
    Location.Parse_error("Syntax error.",
      match !Location.lexbuf with
	| None -> Location.symbol_loc()
	| Some lexbuf ->
	    (* the Parsing library only updates symbol_end_pos when successfully
	     * reducing a grammar rule, so here we ask the lexer for the current
	     * position directly *)
	    Location.mkloc (Parsing.symbol_start_pos()) lexbuf.Lexing.lex_curr_p))


# 138 "parser.ml"
let yytransl_const = [|
  257 (* ACTION *);
  258 (* AMPERAMPER *);
  259 (* AS *);
  260 (* ASSUME *);
  261 (* BARBAR *);
  263 (* BREAK *);
  264 (* CLASS *);
  265 (* COLON *);
  266 (* COMMA *);
  267 (* COMMENT *);
  268 (* CONSTRUCTOR *);
  269 (* CONTINUE *);
  270 (* DISPOSE *);
  271 (* DO *);
  272 (* DOT *);
  273 (* ELSE *);
  274 (* EMPTY *);
  275 (* ENSURES *);
    0 (* EOF *);
  276 (* EQUAL *);
  280 (* IF *);
  284 (* INTERFERE *);
  285 (* INVARIANT *);
  286 (* LBRACE *);
  287 (* LBRACKET *);
  288 (* LET *);
  289 (* LPAREN *);
  290 (* MINUSGREATER *);
  292 (* NEW *);
  293 (* PAR *);
  294 (* POINTSTO *);
  295 (* RBRACE *);
  296 (* RBRACKET *);
  297 (* REQUIRES *);
  298 (* RESOURCE *);
  299 (* RETURN *);
  300 (* RPAREN *);
  302 (* SEMI *);
  303 (* STAR *);
  304 (* THEN *);
  305 (* TREE *);
  307 (* UNDERSCORE *);
  308 (* VOID *);
  309 (* WHEN *);
  310 (* WHILE *);
  311 (* WITH *);
  312 (* QUALIF *);
  313 (* SINGLE_QUALIF *);
  314 (* SPEC *);
  315 (* TILDE *);
  316 (* LBRACELESS *);
  317 (* GREATERRBRACE *);
  318 (* WILD *);
  319 (* IN *);
  320 (* UNION *);
  321 (* CONCAT *);
  322 (* REC *);
  323 (* PURESPEC *);
  324 (* EFFSPEC *);
  325 (* IMPLIES *);
  326 (* SETDECL *);
  327 (* TDESC *);
    0|]

let yytransl_block = [|
  262 (* BOOL *);
  277 (* IDENT *);
  278 (* QIDENT *);
  279 (* FIDENT *);
  281 (* INFIXOP1 *);
  282 (* INFIXOP2 *);
  283 (* INFIXOP3 *);
  291 (* NAT *);
  301 (* STRING *);
  306 (* UNARYOP *);
    0|]

let yylhs = "\255\255\
\001\000\004\000\004\000\004\000\006\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\008\000\008\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\009\000\020\000\020\000\011\000\011\000\012\000\
\013\000\013\000\014\000\014\000\022\000\022\000\022\000\022\000\
\015\000\015\000\010\000\010\000\007\000\007\000\023\000\023\000\
\024\000\024\000\017\000\025\000\025\000\025\000\021\000\021\000\
\027\000\027\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\033\000\033\000\
\030\000\030\000\031\000\031\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\029\000\
\029\000\032\000\032\000\035\000\035\000\036\000\036\000\037\000\
\037\000\016\000\016\000\034\000\034\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\039\000\039\000\040\000\040\000\
\003\000\041\000\041\000\042\000\042\000\043\000\043\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\045\000\045\000\045\000\046\000\046\000\047\000\047\000\044\000\
\044\000\044\000\044\000\049\000\049\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\053\000\053\000\
\052\000\052\000\050\000\050\000\048\000\048\000\048\000\054\000\
\054\000\054\000\055\000\055\000\000\000\000\000\000\000"

let yylen = "\002\000\
\001\000\000\000\002\000\002\000\003\000\003\000\005\000\006\000\
\009\000\009\000\012\000\006\000\007\000\007\000\006\000\007\000\
\007\000\000\000\004\000\002\000\002\000\004\000\006\000\008\000\
\008\000\010\000\002\000\000\000\003\000\002\000\001\000\002\000\
\000\000\002\000\000\000\004\000\011\000\014\000\014\000\017\000\
\000\000\002\000\000\000\001\000\001\000\003\000\000\000\001\000\
\002\000\004\000\003\000\000\000\002\000\004\000\000\000\002\000\
\005\000\007\000\002\000\004\000\003\000\007\000\003\000\005\000\
\005\000\002\000\004\000\002\000\003\000\002\000\002\000\003\000\
\005\000\007\000\006\000\004\000\010\000\010\000\005\000\007\000\
\001\000\002\000\000\000\004\000\001\000\001\000\001\000\003\000\
\005\000\002\000\002\000\003\000\003\000\004\000\005\000\003\000\
\003\000\003\000\003\000\003\000\003\000\004\000\004\000\001\000\
\001\000\000\000\001\000\001\000\003\000\000\000\001\000\001\000\
\003\000\001\000\003\000\001\000\003\000\003\000\001\000\001\000\
\003\000\003\000\006\000\003\000\003\000\005\000\004\000\006\000\
\003\000\001\000\001\000\001\000\001\000\004\000\002\000\002\000\
\003\000\003\000\003\000\003\000\001\000\001\000\003\000\005\000\
\002\000\000\000\003\000\009\000\006\000\003\000\005\000\001\000\
\003\000\003\000\002\000\003\000\003\000\003\000\005\000\003\000\
\001\000\003\000\004\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\001\000\004\000\001\000\003\000\001\000\003\000\
\002\000\001\000\001\000\003\000\003\000\003\000\001\000\003\000\
\003\000\001\000\001\000\002\000\001\000\003\000\004\000\001\000\
\001\000\001\000\001\000\003\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\000\000\000\000\197\000\000\000\133\000\119\000\
\000\000\131\000\000\000\000\000\000\000\000\000\132\000\000\000\
\000\000\000\000\000\000\199\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\003\000\004\000\
\000\000\000\000\000\000\000\000\130\000\000\000\000\000\136\000\
\000\000\000\000\087\000\000\000\000\000\000\000\000\000\086\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\145\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\111\000\000\000\000\000\000\000\000\000\
\118\000\129\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\124\000\000\000\000\000\000\000\140\000\000\000\141\000\
\000\000\121\000\142\000\000\000\147\000\018\000\000\000\000\000\
\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\
\000\000\000\000\000\000\152\000\000\000\000\000\000\000\178\000\
\000\000\000\000\179\000\000\000\000\000\000\000\171\000\000\000\
\000\000\000\000\000\000\127\000\000\000\000\000\134\000\000\000\
\000\000\000\000\000\000\107\000\000\000\000\000\088\000\000\000\
\093\000\000\000\000\000\000\000\000\000\000\000\092\000\000\000\
\000\000\000\000\000\000\000\000\018\000\000\000\000\000\046\000\
\000\000\000\000\000\000\048\000\044\000\000\000\000\000\000\000\
\000\000\000\000\000\000\031\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\177\000\000\000\
\000\000\000\000\000\000\000\000\165\000\164\000\192\000\194\000\
\000\000\193\000\000\000\000\000\000\000\000\000\000\000\161\000\
\000\000\189\000\000\000\000\000\000\000\126\000\000\000\113\000\
\000\000\000\000\000\000\102\000\103\000\000\000\094\000\000\000\
\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\175\000\000\000\000\000\000\000\000\000\000\000\
\176\000\180\000\156\000\174\000\000\000\000\000\000\000\000\000\
\160\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\169\000\170\000\000\000\168\000\181\000\182\000\000\000\000\000\
\128\000\000\000\109\000\117\000\089\000\095\000\000\000\000\000\
\000\000\000\000\008\000\000\000\000\000\000\000\015\000\000\000\
\115\000\000\000\000\000\000\000\029\000\000\000\000\000\000\000\
\000\000\012\000\000\000\000\000\172\000\188\000\185\000\184\000\
\000\000\000\000\000\000\000\000\162\000\000\000\000\000\190\000\
\000\000\000\000\000\000\144\000\000\000\000\000\000\000\019\000\
\000\000\050\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\055\000\000\000\000\000\000\000\000\000\
\000\000\055\000\000\000\000\000\016\000\000\000\000\000\000\000\
\034\000\000\000\041\000\000\000\013\000\159\000\163\000\167\000\
\191\000\196\000\017\000\014\000\000\000\000\000\000\000\000\000\
\070\000\000\000\071\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\068\000\000\000\000\000\
\000\000\051\000\000\000\059\000\000\000\066\000\000\000\000\000\
\000\000\055\000\000\000\000\000\000\000\000\000\000\000\072\000\
\000\000\061\000\000\000\104\000\000\000\000\000\000\000\000\000\
\000\000\063\000\056\000\000\000\000\000\081\000\069\000\000\000\
\000\000\000\000\000\000\009\000\000\000\000\000\000\000\010\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\060\000\
\054\000\000\000\000\000\000\000\000\000\067\000\082\000\000\000\
\000\000\000\000\000\000\000\000\036\000\000\000\041\000\151\000\
\064\000\000\000\000\000\000\000\065\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\075\000\084\000\000\000\000\000\000\000\011\000\
\062\000\000\000\074\000\000\000\079\000\000\000\058\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\080\000\000\000\
\000\000\078\000\077\000\000\000\000\000\000\000\000\000\055\000\
\000\000\000\000\000\000\039\000\000\000\055\000\000\000\040\000"

let yydgoto = "\004\000\
\005\000\017\000\020\000\006\000\031\000\032\000\173\000\163\000\
\112\000\174\000\179\000\240\000\040\001\091\001\131\001\170\000\
\031\001\033\000\133\000\180\000\116\001\161\001\171\000\172\000\
\081\001\147\001\083\001\084\001\142\001\149\001\154\001\146\000\
\150\001\147\000\148\000\075\000\076\000\018\000\106\000\107\000\
\021\000\060\000\063\001\134\000\207\000\208\000\004\001\209\000\
\135\000\245\000\136\000\186\000\187\000\210\000\007\001"

let yysindex = "\036\002\
\000\000\249\005\220\254\000\000\000\000\172\255\000\000\000\000\
\094\255\000\000\085\255\204\000\204\000\249\005\000\000\064\004\
\020\255\055\000\031\255\000\000\129\000\034\255\153\255\249\005\
\022\000\065\000\249\005\069\000\073\000\099\000\000\000\000\000\
\124\255\159\255\204\000\204\000\000\000\204\000\160\255\000\000\
\102\255\001\000\000\000\207\255\213\255\064\004\064\004\000\000\
\008\255\064\004\230\255\249\005\249\005\204\000\204\000\204\000\
\204\000\222\255\107\000\220\254\000\000\086\255\091\000\057\255\
\208\255\097\000\113\000\046\255\118\255\121\000\176\255\136\000\
\173\000\249\005\234\255\000\000\116\001\164\000\225\255\249\005\
\000\000\000\000\064\004\064\004\230\255\076\001\195\000\176\000\
\230\255\064\004\064\004\064\004\064\004\064\004\213\000\064\004\
\020\255\000\000\031\001\243\000\223\000\000\000\247\000\000\000\
\216\000\000\000\000\000\240\000\000\000\000\000\176\255\005\001\
\000\000\025\001\029\001\052\001\000\000\029\001\249\005\059\001\
\104\000\029\001\052\001\000\000\244\000\015\255\176\255\000\000\
\176\255\066\001\000\000\068\001\017\255\169\255\000\000\074\001\
\058\001\065\001\127\255\000\000\204\000\204\000\000\000\095\255\
\153\000\053\001\056\001\000\000\072\001\088\001\000\000\012\006\
\000\000\226\000\049\001\172\000\089\000\230\255\000\000\226\000\
\204\000\078\001\235\255\040\255\000\000\176\255\102\001\000\000\
\096\001\081\001\082\001\000\000\000\000\083\001\091\255\176\255\
\249\005\249\005\061\001\000\000\095\001\104\001\073\001\140\001\
\141\001\112\001\121\001\013\255\061\003\100\001\000\000\131\001\
\176\255\176\255\147\001\176\255\000\000\000\000\000\000\000\000\
\067\000\000\000\174\255\125\001\125\001\125\001\125\001\000\000\
\125\001\000\000\014\000\052\001\052\001\000\000\133\001\000\000\
\249\005\064\004\064\004\000\000\000\000\136\001\000\000\128\001\
\168\001\228\255\162\001\000\000\016\000\019\255\181\001\103\255\
\052\001\177\001\178\001\021\255\020\255\170\255\176\255\186\001\
\170\001\103\255\000\000\125\001\158\001\119\255\182\001\169\001\
\000\000\000\000\000\000\000\000\125\001\100\001\040\255\176\255\
\000\000\161\001\200\001\173\001\166\001\206\001\159\001\000\001\
\000\000\000\000\000\001\000\000\000\000\000\000\185\001\187\001\
\000\000\020\255\000\000\000\000\000\000\000\000\203\001\176\255\
\209\001\175\001\000\000\211\001\052\001\084\005\000\000\205\001\
\000\000\208\001\176\255\215\001\000\000\040\255\205\001\217\001\
\104\000\000\000\205\001\080\002\000\000\000\000\000\000\000\000\
\226\003\040\255\204\001\148\255\000\000\188\001\221\000\000\000\
\205\001\205\001\247\000\000\000\040\255\238\001\207\001\000\000\
\176\255\000\000\219\001\210\001\220\001\214\001\034\006\122\005\
\156\000\221\001\229\001\000\000\225\001\018\006\231\001\241\001\
\233\001\000\000\222\001\253\000\000\000\249\005\042\255\176\255\
\000\000\243\001\000\000\061\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\253\001\016\002\040\255\064\004\
\000\000\237\001\000\000\064\004\180\001\182\255\025\002\059\003\
\245\001\059\003\023\002\188\004\020\002\000\000\129\002\059\003\
\246\001\000\000\122\005\000\000\021\002\000\000\220\255\024\002\
\040\255\000\000\067\255\186\001\034\002\176\255\232\001\000\000\
\234\005\000\000\026\002\000\000\049\001\000\002\084\005\004\002\
\029\002\000\000\000\000\216\255\103\000\000\000\000\000\007\002\
\027\002\122\005\032\002\000\000\176\255\226\004\035\002\000\000\
\000\000\217\001\209\001\040\255\012\002\064\004\045\002\000\000\
\000\000\122\005\018\002\047\002\064\004\000\000\000\000\038\002\
\064\004\067\002\064\004\040\255\000\000\044\002\000\000\000\000\
\000\000\028\002\057\002\062\002\000\000\049\002\039\002\122\005\
\108\003\059\002\103\002\029\001\114\255\041\002\051\002\122\005\
\064\004\048\002\000\000\000\000\052\002\064\004\054\002\000\000\
\000\000\064\004\000\000\055\002\000\000\064\004\000\000\151\003\
\060\002\066\002\050\002\082\002\249\005\058\002\000\000\086\002\
\249\255\000\000\000\000\064\002\249\005\007\000\254\000\000\000\
\249\005\008\005\068\000\000\000\063\002\000\000\046\005\000\000"

let yyrindex = "\000\000\
\000\000\000\000\103\003\000\000\000\000\136\003\000\000\000\000\
\095\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\143\003\092\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\105\000\102\002\000\000\000\000\000\000\000\000\
\000\000\022\255\000\000\004\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\103\003\000\000\000\000\000\000\245\255\
\105\002\000\000\000\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\137\000\000\000\000\000\000\000\
\000\000\000\000\158\000\104\002\058\000\000\000\000\000\000\000\
\165\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\031\003\000\000\147\002\223\001\119\001\000\000\179\002\000\000\
\246\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\170\000\000\000\109\002\000\000\000\000\
\088\002\109\002\170\000\000\000\102\003\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\167\003\
\000\000\000\000\000\000\000\000\102\002\000\000\000\000\000\000\
\187\000\115\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\019\002\222\002\171\001\067\001\219\000\000\000\071\002\
\000\000\000\000\000\000\130\002\000\000\000\000\218\000\000\000\
\000\000\000\000\117\002\000\000\000\000\000\000\082\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\131\002\
\132\002\000\000\000\000\000\000\000\000\039\004\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\170\000\170\000\000\000\000\000\000\000\
\000\000\000\000\104\002\000\000\000\000\000\000\000\000\000\000\
\026\003\000\000\000\000\000\000\000\000\000\000\228\000\000\000\
\125\002\000\000\000\000\000\000\100\002\000\000\000\000\031\000\
\000\000\000\000\000\000\000\000\000\000\134\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\054\004\117\000\000\000\
\000\000\000\000\135\002\000\000\038\255\112\002\000\000\216\003\
\000\000\000\000\237\003\000\000\000\000\000\000\000\000\000\000\
\000\000\032\003\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\140\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\219\255\000\000\122\255\
\088\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\096\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\208\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\100\000\000\000\
\000\000\000\000\000\000\000\000\000\000\208\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\160\005\000\000\141\002\000\000\000\000\000\000\000\000\000\000\
\120\000\000\000\000\000\031\000\138\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\022\001\000\000\140\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\155\003\000\000\000\000\000\000\000\000\000\000\
\000\000\122\255\000\000\008\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\158\000\000\000\000\000\198\005\
\000\000\150\004\000\000\144\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\105\004\000\000\000\000\000\000\000\000\
\000\000\000\000\137\002\109\002\000\000\000\000\000\000\000\000\
\158\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\104\002\000\000\000\000\000\000\104\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\183\255\000\000\
\000\000\000\000\000\000\000\000\191\255\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\242\255\000\000\000\000\000\000\000\000\236\255\021\003\
\000\000\136\255\148\002\096\002\065\002\030\002\037\002\145\255\
\098\255\060\000\188\255\014\002\190\254\000\000\224\002\173\002\
\068\002\233\254\001\002\243\255\182\254\000\000\000\000\173\255\
\069\002\118\254\241\002\229\255\066\003\018\000\000\000\189\002\
\161\003\000\000\061\002\146\255\000\000\069\255\163\002\000\000\
\099\001\232\002\101\255\236\002\237\002\064\255\175\002"

let yytablesize = 1876
let yytable = "\041\000\
\149\000\181\000\051\000\085\000\066\000\149\000\082\001\148\000\
\078\000\064\000\006\001\182\000\068\000\003\001\193\000\123\001\
\189\000\194\000\193\000\019\000\193\000\194\000\193\000\194\000\
\052\000\194\000\120\000\246\000\087\000\039\000\040\000\042\000\
\085\000\086\000\191\001\184\000\089\000\097\000\098\000\144\001\
\088\000\193\000\164\000\193\000\194\000\152\001\194\000\193\000\
\111\001\185\000\052\000\059\000\077\000\077\000\062\000\079\000\
\251\000\091\000\188\000\139\000\190\000\052\000\212\001\158\001\
\119\000\144\000\053\000\159\001\120\000\145\000\145\000\099\000\
\100\000\101\000\102\000\105\000\154\000\155\000\156\000\157\000\
\158\000\196\000\160\000\042\001\195\000\196\000\028\001\196\000\
\036\001\196\000\246\000\120\000\053\000\008\001\168\000\052\000\
\011\001\230\000\193\000\052\000\015\001\016\001\034\000\053\000\
\175\000\160\001\052\000\236\000\196\000\128\001\196\000\217\000\
\120\000\215\000\159\001\110\000\154\000\036\000\006\001\082\001\
\003\001\024\000\035\000\114\000\254\000\255\000\035\000\001\001\
\061\000\085\001\178\001\052\000\030\001\044\001\211\000\020\001\
\089\001\053\000\224\000\243\000\093\001\053\000\049\001\027\000\
\072\000\081\000\188\001\121\000\053\000\126\000\122\000\244\000\
\208\001\128\000\099\001\100\001\111\000\235\000\077\000\077\000\
\035\000\054\000\237\000\238\000\090\000\234\001\214\000\197\000\
\203\001\030\000\038\001\239\001\198\000\053\000\052\000\073\000\
\211\001\130\000\225\000\022\000\131\000\124\000\023\000\037\000\
\055\000\056\000\057\000\050\001\197\000\074\000\024\000\038\000\
\025\000\198\000\199\000\200\000\125\000\063\000\201\000\199\000\
\200\000\112\001\018\001\026\000\145\000\145\000\126\000\080\000\
\127\000\037\001\128\000\061\001\027\000\028\000\083\000\202\000\
\053\000\115\000\101\000\032\000\005\001\037\000\087\001\029\000\
\052\000\129\000\054\000\007\000\203\000\038\000\032\000\204\000\
\205\000\206\000\130\000\172\001\024\001\131\000\030\000\083\000\
\116\000\132\000\103\000\010\000\011\000\084\000\032\000\013\000\
\173\001\055\000\056\000\057\000\103\001\052\000\038\000\227\000\
\015\000\032\000\054\000\156\001\025\001\085\000\085\000\095\000\
\085\000\021\000\053\000\052\000\082\000\085\000\135\000\016\000\
\104\000\228\000\021\000\129\001\085\000\140\000\085\000\141\000\
\085\000\055\000\056\000\057\000\085\000\085\000\085\000\033\000\
\228\001\085\000\013\001\032\001\227\000\085\000\058\000\053\000\
\021\000\085\000\065\000\085\000\082\000\043\001\231\001\085\000\
\014\001\085\000\085\000\085\000\113\001\053\000\027\001\085\000\
\054\000\109\001\033\000\091\000\091\000\149\000\091\000\148\000\
\119\001\164\001\100\000\091\000\020\000\033\000\085\000\127\001\
\052\000\085\000\091\000\207\001\091\000\020\000\091\000\055\000\
\056\000\057\000\091\000\091\000\091\000\067\000\197\000\091\000\
\180\001\069\000\135\001\198\000\058\000\070\000\137\001\091\000\
\120\000\091\000\141\001\020\000\141\001\091\000\022\000\091\000\
\091\000\091\000\141\001\237\001\120\000\091\000\120\000\022\000\
\120\000\002\001\053\000\094\000\023\000\154\000\139\000\071\000\
\025\000\120\000\095\000\148\001\091\000\023\000\218\001\091\000\
\154\000\025\000\220\001\120\000\177\000\022\000\178\000\120\000\
\113\000\154\000\120\000\108\000\024\000\174\001\117\000\120\000\
\154\000\118\000\154\000\023\000\110\000\024\000\110\000\025\000\
\186\001\123\000\090\000\154\000\137\000\091\000\120\000\145\000\
\154\000\120\000\218\000\193\001\026\000\195\001\090\000\090\000\
\154\000\090\000\099\000\024\000\154\000\026\000\090\000\112\001\
\167\000\092\000\093\000\094\000\112\000\090\000\112\000\090\000\
\154\000\090\000\095\000\145\000\083\000\090\000\090\000\090\000\
\216\001\138\000\090\000\026\000\145\000\093\000\094\000\096\000\
\145\000\106\000\090\000\106\000\090\000\095\000\225\001\143\000\
\090\000\007\000\090\000\090\000\090\000\047\000\230\001\047\000\
\090\000\054\000\235\001\153\000\101\000\101\000\138\000\101\000\
\037\000\010\000\011\000\152\000\101\000\013\000\108\000\090\000\
\108\000\159\000\090\000\101\000\038\000\101\000\015\000\101\000\
\055\000\056\000\057\000\101\000\101\000\101\000\199\000\200\000\
\101\000\057\000\092\000\093\000\094\000\016\000\090\000\161\000\
\101\000\091\000\101\000\095\000\162\000\045\000\101\000\045\000\
\101\000\101\000\101\000\202\000\056\000\057\000\101\000\049\000\
\135\000\049\000\097\000\135\000\183\000\092\000\093\000\094\000\
\135\000\199\000\200\000\232\001\233\001\101\000\125\001\135\000\
\101\000\135\000\165\000\135\000\001\000\002\000\003\000\135\000\
\135\000\135\000\126\001\096\000\135\000\166\000\202\000\009\001\
\010\001\167\000\090\000\012\001\135\000\091\000\135\000\055\000\
\056\000\057\000\135\000\203\000\135\000\135\000\135\000\205\000\
\206\000\105\000\135\000\105\000\100\000\100\000\098\000\100\000\
\169\000\092\000\093\000\094\000\100\000\090\000\150\000\176\000\
\091\000\135\000\095\000\100\000\135\000\100\000\191\000\100\000\
\192\000\211\000\212\000\100\000\100\000\243\000\130\000\096\000\
\100\000\213\000\219\000\220\000\092\000\093\000\094\000\126\000\
\100\000\244\000\100\000\128\000\222\000\095\000\100\000\115\000\
\100\000\100\000\100\000\221\000\231\000\054\000\100\000\151\000\
\139\000\226\000\096\000\139\000\232\000\142\000\234\000\233\000\
\139\000\090\000\239\000\130\000\091\000\100\000\131\000\139\000\
\100\000\139\000\241\000\139\000\055\000\056\000\057\000\139\000\
\139\000\125\000\137\000\242\000\139\000\247\000\248\000\249\000\
\092\000\093\000\094\000\126\000\139\000\244\000\139\000\128\000\
\250\000\095\000\139\000\253\000\139\000\139\000\139\000\000\001\
\196\000\054\000\139\000\022\001\099\000\099\000\096\000\099\000\
\017\001\023\001\130\000\021\001\099\000\090\000\026\001\130\000\
\091\000\139\000\131\000\099\000\139\000\099\000\029\001\099\000\
\055\000\056\000\057\000\099\000\034\001\039\001\035\001\041\001\
\099\000\045\001\184\000\185\000\092\000\093\000\094\000\051\001\
\099\000\052\001\099\000\053\001\054\001\095\000\099\000\055\001\
\099\000\099\000\099\000\056\001\064\001\096\000\099\000\059\001\
\138\000\138\001\096\000\138\000\057\001\062\001\058\001\065\001\
\138\000\090\000\030\001\088\001\091\000\099\000\086\001\138\000\
\099\000\138\000\095\001\138\000\090\001\122\000\101\001\138\000\
\097\001\115\001\102\001\104\001\138\000\114\001\117\001\105\001\
\092\000\093\000\094\000\107\001\138\000\121\001\138\000\120\001\
\106\001\095\000\138\000\124\001\138\000\138\000\138\000\122\001\
\130\001\133\001\138\000\165\001\097\000\097\000\096\000\097\000\
\134\001\143\000\136\001\139\001\097\000\090\000\125\000\123\000\
\091\000\138\000\143\001\097\000\138\000\097\000\145\001\097\000\
\148\001\155\001\153\001\163\001\157\001\168\001\167\001\170\001\
\097\000\171\001\176\001\179\001\092\000\093\000\094\000\182\001\
\097\000\185\001\097\000\177\001\187\001\095\000\097\000\189\001\
\097\000\097\000\097\000\190\001\178\000\194\001\097\000\198\001\
\098\000\098\000\096\000\098\000\196\001\199\001\200\001\205\001\
\098\000\201\001\202\001\210\001\214\001\097\000\209\001\098\000\
\097\000\098\000\221\001\098\000\238\001\213\001\229\001\223\001\
\130\000\217\001\219\001\130\000\098\000\175\000\146\000\226\001\
\090\000\199\000\200\000\091\000\098\000\222\001\098\000\130\000\
\206\001\130\000\098\000\130\000\098\000\098\000\098\000\130\000\
\130\000\130\000\098\000\252\000\130\000\224\001\202\000\092\000\
\093\000\094\000\090\000\227\001\130\000\091\000\130\000\001\000\
\095\000\098\000\130\000\203\000\098\000\130\000\198\000\205\000\
\206\000\110\000\130\000\106\000\137\000\096\000\045\000\137\000\
\043\000\092\000\093\000\094\000\137\000\028\000\116\000\027\000\
\114\000\130\000\095\000\137\000\130\000\137\000\173\000\137\000\
\047\000\030\000\186\000\183\000\195\000\166\000\151\001\096\000\
\137\000\187\000\052\000\053\000\130\000\150\000\057\000\130\000\
\137\000\229\000\137\000\132\001\092\001\192\001\137\000\183\001\
\137\000\137\000\137\000\130\000\162\001\130\000\137\000\130\000\
\033\001\066\001\019\001\130\000\130\000\130\000\215\001\216\000\
\130\000\085\000\169\001\060\001\085\000\137\000\096\001\158\000\
\137\000\175\001\130\000\197\001\109\000\046\001\130\000\184\001\
\096\000\130\000\047\001\000\000\048\001\098\001\130\000\096\000\
\085\000\085\000\085\000\000\000\157\000\000\000\096\000\000\000\
\096\000\085\000\096\000\000\000\000\000\130\000\000\000\000\000\
\130\000\000\000\122\000\096\000\000\000\085\000\085\000\000\000\
\000\000\000\000\000\000\096\000\000\000\096\000\122\000\000\000\
\122\000\096\000\122\000\096\000\000\000\096\000\000\000\000\000\
\000\000\096\000\000\000\122\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\122\000\143\000\000\000\
\096\000\122\000\000\000\096\000\122\000\000\000\155\000\000\000\
\000\000\122\000\143\000\000\000\143\000\000\000\143\000\125\000\
\123\000\125\000\123\000\125\000\123\000\153\000\000\000\143\000\
\122\000\000\000\000\000\122\000\125\000\123\000\000\000\000\000\
\043\000\143\000\000\000\000\000\000\000\143\000\125\000\123\000\
\143\000\000\000\125\000\123\000\000\000\143\000\000\000\044\000\
\197\000\045\000\125\000\123\000\046\000\198\000\199\000\200\000\
\000\000\000\000\201\000\047\000\143\000\048\000\049\000\143\000\
\000\000\125\000\123\000\000\000\125\000\123\000\175\000\175\000\
\252\000\140\001\175\000\202\000\050\000\090\000\000\000\000\000\
\091\000\175\000\000\000\000\000\000\000\175\000\000\000\000\000\
\203\000\175\000\175\000\204\000\205\000\206\000\175\000\175\000\
\175\000\175\000\000\000\175\000\092\000\093\000\094\000\000\000\
\000\000\000\000\000\000\000\000\175\000\095\000\000\000\000\000\
\000\000\175\000\000\000\000\000\175\000\000\000\000\000\204\001\
\090\000\175\000\096\000\091\000\092\000\175\000\000\000\092\000\
\000\000\175\000\000\000\000\000\175\000\175\000\175\000\173\000\
\173\000\175\000\175\000\173\000\000\000\000\000\000\000\092\000\
\093\000\094\000\173\000\092\000\092\000\092\000\000\000\000\000\
\125\001\000\000\173\000\173\000\092\000\000\000\000\000\173\000\
\173\000\173\000\173\000\000\000\173\000\096\000\000\000\000\000\
\092\000\092\000\000\000\000\000\000\000\173\000\000\000\000\000\
\000\000\000\000\173\000\000\000\000\000\173\000\000\000\000\000\
\158\000\158\000\173\000\000\000\158\000\000\000\173\000\000\000\
\000\000\000\000\173\000\158\000\000\000\173\000\173\000\173\000\
\000\000\000\000\173\000\173\000\158\000\157\000\157\000\000\000\
\000\000\157\000\000\000\158\000\000\000\158\000\000\000\000\000\
\157\000\000\000\000\000\199\000\200\000\000\000\158\000\000\000\
\000\000\157\000\000\000\158\000\000\000\000\000\000\000\000\000\
\157\000\000\000\157\000\158\000\000\000\094\001\000\000\158\000\
\202\000\000\000\000\000\157\000\000\000\000\000\000\000\000\000\
\157\000\000\000\000\000\158\000\158\000\203\000\000\000\000\000\
\157\000\205\000\206\000\000\000\157\000\000\000\000\000\155\000\
\155\000\000\000\000\000\155\000\000\000\000\000\000\000\000\000\
\157\000\157\000\155\000\000\000\000\000\000\000\153\000\153\000\
\000\000\000\000\153\000\155\000\000\000\000\000\000\000\000\000\
\000\000\153\000\155\000\000\000\155\000\043\000\000\000\000\000\
\000\000\000\000\153\000\000\000\000\000\155\000\000\000\000\000\
\000\000\153\000\155\000\153\000\044\000\000\000\045\000\000\000\
\000\000\046\000\155\000\000\000\153\000\000\000\155\000\000\000\
\047\000\153\000\048\000\049\000\000\000\000\000\000\000\000\000\
\000\000\153\000\155\000\073\000\073\000\153\000\073\000\073\000\
\000\000\050\000\000\000\073\000\000\000\073\000\073\000\073\000\
\000\000\153\000\000\000\000\000\000\000\073\000\000\000\073\000\
\073\000\000\000\073\000\000\000\073\000\000\000\073\000\000\000\
\000\000\073\000\000\000\073\000\073\000\073\000\000\000\073\000\
\000\000\000\000\000\000\073\000\000\000\000\000\000\000\000\000\
\000\000\076\000\073\000\076\000\076\000\000\000\073\000\073\000\
\076\000\000\000\076\000\076\000\076\000\000\000\076\000\000\000\
\000\000\000\000\076\000\000\000\076\000\076\000\000\000\076\000\
\000\000\076\000\000\000\076\000\000\000\000\000\076\000\000\000\
\076\000\076\000\076\000\000\000\076\000\000\000\000\000\067\001\
\076\000\043\000\068\001\000\000\000\000\000\000\069\001\076\000\
\070\001\071\001\072\001\076\000\076\000\000\000\000\000\000\000\
\110\001\000\000\045\000\074\001\000\000\046\000\000\000\075\001\
\000\000\076\001\000\000\000\000\047\000\000\000\048\000\049\000\
\077\001\000\000\146\001\000\000\000\000\067\001\078\001\043\000\
\068\001\000\000\000\000\000\000\069\001\050\000\070\001\071\001\
\072\001\079\001\080\001\000\000\000\000\000\000\110\001\000\000\
\045\000\074\001\000\000\046\000\000\000\075\001\000\000\076\001\
\000\000\000\000\047\000\000\000\048\000\049\000\077\001\000\000\
\181\001\000\000\000\000\067\001\078\001\043\000\068\001\000\000\
\000\000\000\000\069\001\050\000\070\001\071\001\072\001\079\001\
\080\001\000\000\000\000\000\000\110\001\000\000\045\000\074\001\
\000\000\046\000\000\000\075\001\000\000\076\001\000\000\000\000\
\047\000\000\000\048\000\049\000\077\001\000\000\236\001\000\000\
\000\000\067\001\078\001\043\000\068\001\000\000\000\000\000\000\
\069\001\050\000\070\001\071\001\072\001\079\001\080\001\000\000\
\000\000\000\000\110\001\000\000\045\000\074\001\000\000\046\000\
\000\000\075\001\000\000\076\001\000\000\000\000\047\000\000\000\
\048\000\049\000\077\001\000\000\240\001\000\000\000\000\067\001\
\078\001\043\000\068\001\000\000\000\000\000\000\069\001\050\000\
\070\001\071\001\072\001\079\001\080\001\000\000\000\000\000\000\
\073\001\000\000\045\000\074\001\000\000\046\000\000\000\075\001\
\000\000\076\001\000\000\000\000\047\000\000\000\048\000\049\000\
\077\001\000\000\000\000\000\000\000\000\067\001\078\001\043\000\
\068\001\000\000\000\000\000\000\069\001\050\000\070\001\071\001\
\072\001\079\001\080\001\000\000\000\000\000\000\110\001\000\000\
\045\000\074\001\000\000\046\000\000\000\075\001\000\000\076\001\
\000\000\000\000\047\000\000\000\048\000\049\000\077\001\000\000\
\000\000\000\000\000\000\083\000\078\001\083\000\083\000\000\000\
\000\000\000\000\083\000\050\000\083\000\083\000\083\000\079\001\
\080\001\000\000\000\000\000\000\083\000\000\000\083\000\083\000\
\000\000\083\000\000\000\083\000\000\000\083\000\000\000\000\000\
\083\000\000\000\083\000\083\000\083\000\000\000\000\000\000\000\
\000\000\028\000\083\000\028\000\028\000\000\000\000\000\000\000\
\028\000\083\000\028\000\028\000\028\000\083\000\083\000\000\000\
\000\000\000\000\028\000\000\000\028\000\028\000\000\000\028\000\
\000\000\028\000\000\000\028\000\000\000\000\000\028\000\000\000\
\028\000\028\000\028\000\090\000\150\000\000\000\091\000\000\000\
\028\000\000\000\000\000\166\001\000\000\000\000\000\000\028\000\
\000\000\000\000\000\000\028\000\028\000\000\000\007\000\000\000\
\000\000\000\000\092\000\093\000\094\000\000\000\000\000\000\000\
\000\000\000\000\008\000\095\000\000\000\009\000\010\000\011\000\
\012\000\043\000\013\000\000\000\000\000\151\000\000\000\043\000\
\096\000\014\000\000\000\015\000\000\000\000\000\000\000\000\000\
\044\000\000\000\045\000\000\000\000\000\046\000\044\000\043\000\
\045\000\000\000\016\000\046\000\047\000\000\000\048\000\049\000\
\000\000\000\000\047\000\000\000\048\000\049\000\044\000\223\000\
\045\000\000\000\000\000\046\000\000\000\050\000\000\000\118\001\
\000\000\000\000\108\001\050\000\048\000\049\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\050\000"

let yycheck = "\014\000\
\084\000\122\000\016\000\000\000\025\000\000\000\030\001\000\000\
\036\000\024\000\203\000\123\000\027\000\201\000\002\001\082\001\
\127\000\005\001\002\001\056\001\002\001\005\001\002\001\005\001\
\005\001\005\001\005\001\183\000\021\001\012\000\013\000\014\000\
\046\000\047\000\173\001\021\001\050\000\052\000\053\000\114\001\
\033\001\002\001\111\000\002\001\005\001\120\001\005\001\010\001\
\072\001\035\001\005\001\021\001\035\000\036\000\021\001\038\000\
\044\001\000\000\127\000\074\000\129\000\005\001\201\001\130\001\
\019\001\080\000\047\001\001\001\047\001\083\000\084\000\054\000\
\055\000\056\000\057\000\058\000\090\000\091\000\092\000\093\000\
\094\000\069\001\096\000\242\000\068\001\069\001\068\001\069\001\
\068\001\069\001\246\000\000\000\047\001\204\000\115\000\005\001\
\207\000\166\000\061\001\005\001\212\000\213\000\009\001\047\001\
\119\000\039\001\005\001\176\000\069\001\068\001\069\001\017\001\
\067\001\141\000\001\001\030\001\000\000\033\001\055\001\143\001\
\052\001\019\001\001\001\067\001\193\000\194\000\033\001\196\000\
\000\000\032\001\154\001\005\001\030\001\244\000\016\001\219\000\
\039\001\047\001\152\000\021\001\043\001\047\001\253\000\041\001\
\021\001\044\001\170\001\030\001\047\001\031\001\033\001\033\001\
\039\001\035\001\057\001\058\001\071\001\067\001\141\000\142\000\
\039\001\002\001\177\000\178\000\000\000\232\001\040\001\020\001\
\192\001\067\001\239\000\238\001\025\001\047\001\005\001\052\001\
\200\001\059\001\161\000\008\001\062\001\006\001\011\001\001\001\
\025\001\026\001\027\001\000\001\020\001\031\001\019\001\001\001\
\021\001\025\001\026\001\027\001\021\001\045\001\030\001\026\001\
\027\001\020\001\217\000\032\001\218\000\219\000\031\001\048\001\
\033\001\040\001\035\001\024\001\041\001\042\001\033\001\047\001\
\047\001\010\001\000\000\001\001\047\001\039\001\035\001\052\001\
\005\001\050\001\002\001\006\001\060\001\039\001\012\001\063\001\
\064\001\065\001\059\001\020\001\009\001\062\001\067\001\033\001\
\033\001\066\001\021\001\022\001\023\001\033\001\028\001\026\001\
\033\001\025\001\026\001\027\001\065\001\005\001\033\001\021\001\
\035\001\039\001\002\001\040\001\033\001\002\001\003\001\034\001\
\005\001\021\001\047\001\005\001\044\001\010\001\000\000\050\001\
\051\001\039\001\030\001\088\001\017\001\044\001\019\001\046\001\
\021\001\025\001\026\001\027\001\025\001\026\001\027\001\001\001\
\040\001\030\001\021\001\232\000\021\001\034\001\038\001\047\001\
\052\001\038\001\021\001\040\001\044\001\242\000\040\001\044\001\
\035\001\046\001\047\001\048\001\073\001\047\001\039\001\052\001\
\002\001\071\001\028\001\002\001\003\001\056\001\005\001\056\001\
\078\001\134\001\000\000\010\001\021\001\039\001\067\001\086\001\
\005\001\070\001\017\001\196\001\019\001\030\001\021\001\025\001\
\026\001\027\001\025\001\026\001\027\001\021\001\020\001\030\001\
\157\001\021\001\104\001\025\001\038\001\021\001\108\001\038\001\
\005\001\040\001\112\001\052\001\114\001\044\001\021\001\046\001\
\047\001\048\001\120\001\040\001\017\001\052\001\019\001\030\001\
\021\001\047\001\047\001\027\001\021\001\001\001\000\000\021\001\
\021\001\030\001\034\001\021\001\067\001\030\001\210\001\070\001\
\012\001\030\001\214\001\040\001\029\001\052\001\031\001\044\001\
\046\001\021\001\047\001\033\001\021\001\039\001\046\001\052\001\
\028\001\033\001\030\001\052\001\044\001\030\001\046\001\052\001\
\166\001\033\001\002\001\039\001\021\001\005\001\067\001\173\001\
\044\001\070\001\010\001\177\001\021\001\179\001\002\001\003\001\
\052\001\005\001\000\000\052\001\056\001\030\001\010\001\020\001\
\021\001\025\001\026\001\027\001\044\001\017\001\046\001\019\001\
\068\001\021\001\034\001\201\001\033\001\025\001\026\001\027\001\
\206\001\021\001\030\001\052\001\210\001\026\001\027\001\047\001\
\214\001\044\001\038\001\046\001\040\001\034\001\221\001\044\001\
\044\001\006\001\046\001\047\001\048\001\044\001\229\001\046\001\
\052\001\002\001\233\001\044\001\002\001\003\001\000\000\005\001\
\021\001\022\001\023\001\033\001\010\001\026\001\044\001\067\001\
\046\001\021\001\070\001\017\001\033\001\019\001\035\001\021\001\
\025\001\026\001\027\001\025\001\026\001\027\001\026\001\027\001\
\030\001\027\001\025\001\026\001\027\001\050\001\002\001\009\001\
\038\001\005\001\040\001\034\001\021\001\044\001\044\001\046\001\
\046\001\047\001\048\001\047\001\026\001\027\001\052\001\044\001\
\002\001\046\001\000\000\005\001\033\001\025\001\026\001\027\001\
\010\001\026\001\027\001\030\001\031\001\067\001\034\001\017\001\
\070\001\019\001\030\001\021\001\001\000\002\000\003\000\025\001\
\026\001\027\001\046\001\047\001\030\001\021\001\047\001\205\000\
\206\000\021\001\002\001\209\000\038\001\005\001\040\001\025\001\
\026\001\027\001\044\001\060\001\046\001\047\001\048\001\064\001\
\065\001\044\001\052\001\046\001\002\001\003\001\000\000\005\001\
\021\001\025\001\026\001\027\001\010\001\002\001\003\001\021\001\
\005\001\067\001\034\001\017\001\070\001\019\001\021\001\021\001\
\021\001\016\001\033\001\025\001\026\001\021\001\000\000\047\001\
\030\001\033\001\046\001\044\001\025\001\026\001\027\001\031\001\
\038\001\033\001\040\001\035\001\021\001\034\001\044\001\010\001\
\046\001\047\001\048\001\044\001\021\001\002\001\052\001\044\001\
\002\001\044\001\047\001\005\001\044\001\010\001\044\001\046\001\
\010\001\002\001\070\001\059\001\005\001\067\001\062\001\017\001\
\070\001\019\001\044\001\021\001\025\001\026\001\027\001\025\001\
\026\001\021\001\000\000\044\001\030\001\010\001\010\001\040\001\
\025\001\026\001\027\001\031\001\038\001\033\001\040\001\035\001\
\040\001\034\001\044\001\033\001\046\001\047\001\048\001\021\001\
\069\001\002\001\052\001\044\001\002\001\003\001\047\001\005\001\
\044\001\010\001\000\000\044\001\010\001\002\001\021\001\059\001\
\005\001\067\001\062\001\017\001\070\001\019\001\010\001\021\001\
\025\001\026\001\027\001\025\001\020\001\012\001\021\001\030\001\
\030\001\044\001\021\001\035\001\025\001\026\001\027\001\047\001\
\038\001\010\001\040\001\039\001\047\001\034\001\044\001\010\001\
\046\001\047\001\048\001\061\001\046\001\000\000\052\001\021\001\
\002\001\046\001\047\001\005\001\044\001\021\001\044\001\021\001\
\010\001\002\001\030\001\021\001\005\001\067\001\031\001\017\001\
\070\001\019\001\039\001\021\001\028\001\000\000\009\001\025\001\
\061\001\021\001\044\001\033\001\030\001\033\001\030\001\046\001\
\025\001\026\001\027\001\046\001\038\001\021\001\040\001\033\001\
\045\001\034\001\044\001\046\001\046\001\047\001\048\001\039\001\
\030\001\021\001\052\001\044\001\002\001\003\001\047\001\005\001\
\009\001\000\000\046\001\003\001\010\001\002\001\000\000\000\000\
\005\001\067\001\046\001\017\001\070\001\019\001\016\001\021\001\
\021\001\021\001\053\001\010\001\021\001\046\001\021\001\044\001\
\030\001\021\001\044\001\020\001\025\001\026\001\027\001\021\001\
\038\001\046\001\040\001\033\001\016\001\034\001\044\001\046\001\
\046\001\047\001\048\001\021\001\031\001\003\001\052\001\044\001\
\002\001\003\001\047\001\005\001\033\001\021\001\017\001\021\001\
\010\001\033\001\044\001\033\001\033\001\067\001\046\001\017\001\
\070\001\019\001\031\001\021\001\030\001\046\001\031\001\046\001\
\002\001\044\001\044\001\005\001\030\001\000\000\000\000\046\001\
\002\001\026\001\027\001\005\001\038\001\044\001\040\001\017\001\
\010\001\019\001\044\001\021\001\046\001\047\001\048\001\025\001\
\026\001\027\001\052\001\044\001\030\001\044\001\047\001\025\001\
\026\001\027\001\002\001\046\001\038\001\005\001\040\001\000\000\
\034\001\067\001\044\001\060\001\070\001\047\001\000\000\064\001\
\065\001\044\001\052\001\044\001\002\001\047\001\046\001\005\001\
\044\001\025\001\026\001\027\001\010\001\070\001\044\001\030\001\
\044\001\067\001\034\001\017\001\070\001\019\001\000\000\021\001\
\044\001\070\001\040\001\040\001\061\001\039\001\046\001\047\001\
\030\001\044\001\039\001\039\001\002\001\044\001\046\001\005\001\
\038\001\165\000\040\001\092\001\041\001\176\001\044\001\162\001\
\046\001\047\001\048\001\017\001\132\001\019\001\052\001\021\001\
\233\000\029\001\218\000\025\001\026\001\027\001\206\001\142\000\
\030\001\002\001\143\001\023\001\005\001\067\001\052\001\000\000\
\070\001\149\001\040\001\183\001\060\000\246\000\044\001\163\001\
\003\001\047\001\247\000\255\255\248\000\055\001\052\001\010\001\
\025\001\026\001\027\001\255\255\000\000\255\255\017\001\255\255\
\019\001\034\001\021\001\255\255\255\255\067\001\255\255\255\255\
\070\001\255\255\005\001\030\001\255\255\046\001\047\001\255\255\
\255\255\255\255\255\255\038\001\255\255\040\001\017\001\255\255\
\019\001\044\001\021\001\046\001\255\255\048\001\255\255\255\255\
\255\255\052\001\255\255\030\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\040\001\005\001\255\255\
\067\001\044\001\255\255\070\001\047\001\255\255\000\000\255\255\
\255\255\052\001\017\001\255\255\019\001\255\255\021\001\017\001\
\017\001\019\001\019\001\021\001\021\001\000\000\255\255\030\001\
\067\001\255\255\255\255\070\001\030\001\030\001\255\255\255\255\
\006\001\040\001\255\255\255\255\255\255\044\001\040\001\040\001\
\047\001\255\255\044\001\044\001\255\255\052\001\255\255\021\001\
\020\001\023\001\052\001\052\001\026\001\025\001\026\001\027\001\
\255\255\255\255\030\001\033\001\067\001\035\001\036\001\070\001\
\255\255\067\001\067\001\255\255\070\001\070\001\001\001\002\001\
\044\001\047\001\005\001\047\001\050\001\002\001\255\255\255\255\
\005\001\012\001\255\255\255\255\255\255\016\001\255\255\255\255\
\060\001\020\001\021\001\063\001\064\001\065\001\025\001\026\001\
\027\001\028\001\255\255\030\001\025\001\026\001\027\001\255\255\
\255\255\255\255\255\255\255\255\039\001\034\001\255\255\255\255\
\255\255\044\001\255\255\255\255\047\001\255\255\255\255\044\001\
\002\001\052\001\047\001\005\001\002\001\056\001\255\255\005\001\
\255\255\060\001\255\255\255\255\063\001\064\001\065\001\001\001\
\002\001\068\001\069\001\005\001\255\255\255\255\255\255\025\001\
\026\001\027\001\012\001\025\001\026\001\027\001\255\255\255\255\
\034\001\255\255\020\001\021\001\034\001\255\255\255\255\025\001\
\026\001\027\001\028\001\255\255\030\001\047\001\255\255\255\255\
\046\001\047\001\255\255\255\255\255\255\039\001\255\255\255\255\
\255\255\255\255\044\001\255\255\255\255\047\001\255\255\255\255\
\001\001\002\001\052\001\255\255\005\001\255\255\056\001\255\255\
\255\255\255\255\060\001\012\001\255\255\063\001\064\001\065\001\
\255\255\255\255\068\001\069\001\021\001\001\001\002\001\255\255\
\255\255\005\001\255\255\028\001\255\255\030\001\255\255\255\255\
\012\001\255\255\255\255\026\001\027\001\255\255\039\001\255\255\
\255\255\021\001\255\255\044\001\255\255\255\255\255\255\255\255\
\028\001\255\255\030\001\052\001\255\255\044\001\255\255\056\001\
\047\001\255\255\255\255\039\001\255\255\255\255\255\255\255\255\
\044\001\255\255\255\255\068\001\069\001\060\001\255\255\255\255\
\052\001\064\001\065\001\255\255\056\001\255\255\255\255\001\001\
\002\001\255\255\255\255\005\001\255\255\255\255\255\255\255\255\
\068\001\069\001\012\001\255\255\255\255\255\255\001\001\002\001\
\255\255\255\255\005\001\021\001\255\255\255\255\255\255\255\255\
\255\255\012\001\028\001\255\255\030\001\006\001\255\255\255\255\
\255\255\255\255\021\001\255\255\255\255\039\001\255\255\255\255\
\255\255\028\001\044\001\030\001\021\001\255\255\023\001\255\255\
\255\255\026\001\052\001\255\255\039\001\255\255\056\001\255\255\
\033\001\044\001\035\001\036\001\255\255\255\255\255\255\255\255\
\255\255\052\001\068\001\003\001\004\001\056\001\006\001\007\001\
\255\255\050\001\255\255\011\001\255\255\013\001\014\001\015\001\
\255\255\068\001\255\255\255\255\255\255\021\001\255\255\023\001\
\024\001\255\255\026\001\255\255\028\001\255\255\030\001\255\255\
\255\255\033\001\255\255\035\001\036\001\037\001\255\255\039\001\
\255\255\255\255\255\255\043\001\255\255\255\255\255\255\255\255\
\255\255\004\001\050\001\006\001\007\001\255\255\054\001\055\001\
\011\001\255\255\013\001\014\001\015\001\255\255\017\001\255\255\
\255\255\255\255\021\001\255\255\023\001\024\001\255\255\026\001\
\255\255\028\001\255\255\030\001\255\255\255\255\033\001\255\255\
\035\001\036\001\037\001\255\255\039\001\255\255\255\255\004\001\
\043\001\006\001\007\001\255\255\255\255\255\255\011\001\050\001\
\013\001\014\001\015\001\054\001\055\001\255\255\255\255\255\255\
\021\001\255\255\023\001\024\001\255\255\026\001\255\255\028\001\
\255\255\030\001\255\255\255\255\033\001\255\255\035\001\036\001\
\037\001\255\255\039\001\255\255\255\255\004\001\043\001\006\001\
\007\001\255\255\255\255\255\255\011\001\050\001\013\001\014\001\
\015\001\054\001\055\001\255\255\255\255\255\255\021\001\255\255\
\023\001\024\001\255\255\026\001\255\255\028\001\255\255\030\001\
\255\255\255\255\033\001\255\255\035\001\036\001\037\001\255\255\
\039\001\255\255\255\255\004\001\043\001\006\001\007\001\255\255\
\255\255\255\255\011\001\050\001\013\001\014\001\015\001\054\001\
\055\001\255\255\255\255\255\255\021\001\255\255\023\001\024\001\
\255\255\026\001\255\255\028\001\255\255\030\001\255\255\255\255\
\033\001\255\255\035\001\036\001\037\001\255\255\039\001\255\255\
\255\255\004\001\043\001\006\001\007\001\255\255\255\255\255\255\
\011\001\050\001\013\001\014\001\015\001\054\001\055\001\255\255\
\255\255\255\255\021\001\255\255\023\001\024\001\255\255\026\001\
\255\255\028\001\255\255\030\001\255\255\255\255\033\001\255\255\
\035\001\036\001\037\001\255\255\039\001\255\255\255\255\004\001\
\043\001\006\001\007\001\255\255\255\255\255\255\011\001\050\001\
\013\001\014\001\015\001\054\001\055\001\255\255\255\255\255\255\
\021\001\255\255\023\001\024\001\255\255\026\001\255\255\028\001\
\255\255\030\001\255\255\255\255\033\001\255\255\035\001\036\001\
\037\001\255\255\255\255\255\255\255\255\004\001\043\001\006\001\
\007\001\255\255\255\255\255\255\011\001\050\001\013\001\014\001\
\015\001\054\001\055\001\255\255\255\255\255\255\021\001\255\255\
\023\001\024\001\255\255\026\001\255\255\028\001\255\255\030\001\
\255\255\255\255\033\001\255\255\035\001\036\001\037\001\255\255\
\255\255\255\255\255\255\004\001\043\001\006\001\007\001\255\255\
\255\255\255\255\011\001\050\001\013\001\014\001\015\001\054\001\
\055\001\255\255\255\255\255\255\021\001\255\255\023\001\024\001\
\255\255\026\001\255\255\028\001\255\255\030\001\255\255\255\255\
\033\001\255\255\035\001\036\001\037\001\255\255\255\255\255\255\
\255\255\004\001\043\001\006\001\007\001\255\255\255\255\255\255\
\011\001\050\001\013\001\014\001\015\001\054\001\055\001\255\255\
\255\255\255\255\021\001\255\255\023\001\024\001\255\255\026\001\
\255\255\028\001\255\255\030\001\255\255\255\255\033\001\255\255\
\035\001\036\001\037\001\002\001\003\001\255\255\005\001\255\255\
\043\001\255\255\255\255\010\001\255\255\255\255\255\255\050\001\
\255\255\255\255\255\255\054\001\055\001\255\255\006\001\255\255\
\255\255\255\255\025\001\026\001\027\001\255\255\255\255\255\255\
\255\255\255\255\018\001\034\001\255\255\021\001\022\001\023\001\
\024\001\006\001\026\001\255\255\255\255\044\001\255\255\006\001\
\047\001\033\001\255\255\035\001\255\255\255\255\255\255\255\255\
\021\001\255\255\023\001\255\255\255\255\026\001\021\001\006\001\
\023\001\255\255\050\001\026\001\033\001\255\255\035\001\036\001\
\255\255\255\255\033\001\255\255\035\001\036\001\021\001\044\001\
\023\001\255\255\255\255\026\001\255\255\050\001\255\255\046\001\
\255\255\255\255\033\001\050\001\035\001\036\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\050\001"

let yynames_const = "\
  ACTION\000\
  AMPERAMPER\000\
  AS\000\
  ASSUME\000\
  BARBAR\000\
  BREAK\000\
  CLASS\000\
  COLON\000\
  COMMA\000\
  COMMENT\000\
  CONSTRUCTOR\000\
  CONTINUE\000\
  DISPOSE\000\
  DO\000\
  DOT\000\
  ELSE\000\
  EMPTY\000\
  ENSURES\000\
  EOF\000\
  EQUAL\000\
  IF\000\
  INTERFERE\000\
  INVARIANT\000\
  LBRACE\000\
  LBRACKET\000\
  LET\000\
  LPAREN\000\
  MINUSGREATER\000\
  NEW\000\
  PAR\000\
  POINTSTO\000\
  RBRACE\000\
  RBRACKET\000\
  REQUIRES\000\
  RESOURCE\000\
  RETURN\000\
  RPAREN\000\
  SEMI\000\
  STAR\000\
  THEN\000\
  TREE\000\
  UNDERSCORE\000\
  VOID\000\
  WHEN\000\
  WHILE\000\
  WITH\000\
  QUALIF\000\
  SINGLE_QUALIF\000\
  SPEC\000\
  TILDE\000\
  LBRACELESS\000\
  GREATERRBRACE\000\
  WILD\000\
  IN\000\
  UNION\000\
  CONCAT\000\
  REC\000\
  PURESPEC\000\
  EFFSPEC\000\
  IMPLIES\000\
  SETDECL\000\
  TDESC\000\
  "

let yynames_block = "\
  BOOL\000\
  IDENT\000\
  QIDENT\000\
  FIDENT\000\
  INFIXOP1\000\
  INFIXOP2\000\
  INFIXOP3\000\
  NAT\000\
  STRING\000\
  UNARYOP\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'p_items) in
    Obj.repr(
# 166 "parser.mly"
                          ( List.rev _1 )
# 1041 "parser.ml"
               : Parsetree.p_program))
; (fun __caml_parser_env ->
    Obj.repr(
# 169 "parser.mly"
                          ( [] )
# 1047 "parser.ml"
               : 'p_items))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'p_items) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 170 "parser.mly"
                          ( _2 :: _1 )
# 1055 "parser.ml"
               : 'p_items))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'p_items) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'd_vars) in
    Obj.repr(
# 171 "parser.mly"
                          ( _2 @ _1 )
# 1063 "parser.ml"
               : 'p_items))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ids_ne) in
    Obj.repr(
# 174 "parser.mly"
                             ( List.rev_map (fun (x,y)-> Pdec_var(x,_1,y)) _2 )
# 1071 "parser.ml"
               : 'd_vars))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 177 "parser.mly"
                                        ( Pdec_comment(_2) )
# 1078 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'd_fields) in
    Obj.repr(
# 179 "parser.mly"
   ( Pdec_class(_2, None, List.rev _4, Location.rhs_loc 2) )
# 1086 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'class_specs) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'd_fields) in
    Obj.repr(
# 181 "parser.mly"
   ( Pdec_class(_2, _3, List.rev _5, Location.rhs_loc 2) )
# 1095 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'ids) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Parsetree.a_proposition) in
    Obj.repr(
# 183 "parser.mly"
      ( Pdec_indpred(_2,_4,_8,Location.symbol_loc()) )
# 1104 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'inv) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'set_decl) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'constructor_decl) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'interfere_decl) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'actions) in
    Obj.repr(
# 185 "parser.mly"
      ( Pdec_resource(component_of_string _2,[],_4,_6,_7,List.rev _8,_5,Location.symbol_loc()) )
# 1116 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 8 : 'ids) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'inv) in
    let _8 = (Parsing.peek_val __caml_parser_env 4 : 'set_decl) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'constructor_decl) in
    let _10 = (Parsing.peek_val __caml_parser_env 2 : 'interfere_decl) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : 'actions) in
    Obj.repr(
# 187 "parser.mly"
      ( Pdec_resource(component_of_string _2,_4,_7,_9,_10,List.rev _11,_8,Location.symbol_loc()) )
# 1129 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'formals) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'top_block) in
    Obj.repr(
# 189 "parser.mly"
      ( Pdec_fun(_2,"void",_4,(None,None,None,None),_6,Location.symbol_loc()) )
# 1138 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'formals) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'fun_specs) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'top_block) in
    Obj.repr(
# 191 "parser.mly"
      ( Pdec_fun(_2,"void",_4,_6,_7,Location.symbol_loc()) )
# 1148 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'fun_specs) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'formals) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'top_block) in
    Obj.repr(
# 193 "parser.mly"
      ( Pdec_fun(_3,"void",_5,_1,_7,Location.symbol_loc()) )
# 1158 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'formals) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'top_block) in
    Obj.repr(
# 195 "parser.mly"
      ( Pdec_fun(_2,_1,_4,(None,None,None,None),_6,Location.symbol_loc()) )
# 1168 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'formals) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'fun_specs) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'top_block) in
    Obj.repr(
# 197 "parser.mly"
      ( Pdec_fun(_2,_1,_4,_6,_7,Location.symbol_loc()) )
# 1179 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'fun_specs) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'formals) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'top_block) in
    Obj.repr(
# 199 "parser.mly"
      ( Pdec_fun(_3,_2,_5,_1,_7,Location.symbol_loc()) )
# 1190 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 202 "parser.mly"
                               ( [] )
# 1196 "parser.ml"
               : 'd_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'd_fields) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 203 "parser.mly"
                               ( ("."^_3,_2,Location.rhs_loc 3)::_1 )
# 1205 "parser.ml"
               : 'd_fields))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Parsetree.a_proposition) in
    Obj.repr(
# 206 "parser.mly"
                               ( (Some _2, None, None, None) )
# 1212 "parser.ml"
               : 'fun_specs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Parsetree.a_proposition) in
    Obj.repr(
# 207 "parser.mly"
                               ( (None, Some _2, None, None) )
# 1219 "parser.ml"
               : 'fun_specs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Parsetree.a_proposition) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Parsetree.a_proposition) in
    Obj.repr(
# 208 "parser.mly"
                               ( (Some _2, Some _4, None, None) )
# 1227 "parser.ml"
               : 'fun_specs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'qualifier_pattern) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'qualifier_pattern) in
    Obj.repr(
# 210 "parser.mly"
   ( (None, None, Some (_2,_3), Some (_5,_6)) )
# 1237 "parser.ml"
               : 'fun_specs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Parsetree.a_proposition) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'qualifier_pattern) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'qualifier_pattern) in
    Obj.repr(
# 212 "parser.mly"
   ( (Some _2, None, Some (_4,_5), Some (_7,_8)) )
# 1248 "parser.ml"
               : 'fun_specs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Parsetree.a_proposition) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'qualifier_pattern) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'qualifier_pattern) in
    Obj.repr(
# 214 "parser.mly"
   ( (None, Some _2, Some (_4,_5), Some (_7,_8)) )
# 1259 "parser.ml"
               : 'fun_specs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : Parsetree.a_proposition) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : Parsetree.a_proposition) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'qualifier_pattern) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'qualifier_pattern) in
    Obj.repr(
# 216 "parser.mly"
   ( (Some _2, Some _4, Some (_6,_7), Some (_9,_10)) )
# 1271 "parser.ml"
               : 'fun_specs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qualifier_pattern) in
    Obj.repr(
# 219 "parser.mly"
                           ( Some _2 )
# 1278 "parser.ml"
               : 'class_specs))
; (fun __caml_parser_env ->
    Obj.repr(
# 222 "parser.mly"
                           ( None )
# 1284 "parser.ml"
               : 'inv_restr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Parsetree.a_proposition) in
    Obj.repr(
# 223 "parser.mly"
                           ( Some _2 )
# 1291 "parser.ml"
               : 'inv_restr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Parsetree.a_proposition) in
    Obj.repr(
# 226 "parser.mly"
                           ( Some _2 )
# 1298 "parser.ml"
               : 'inv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'inv_restr) in
    Obj.repr(
# 227 "parser.mly"
                           ( _1 )
# 1305 "parser.ml"
               : 'inv))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qualifier_pattern) in
    Obj.repr(
# 230 "parser.mly"
                             ( _2 )
# 1312 "parser.ml"
               : 'set_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 233 "parser.mly"
                           ( ([], []) )
# 1318 "parser.ml"
               : 'constructor_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'top_block) in
    Obj.repr(
# 234 "parser.mly"
                           ( _2 )
# 1325 "parser.ml"
               : 'constructor_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 237 "parser.mly"
                             ( None )
# 1331 "parser.ml"
               : 'interfere_decl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 238 "parser.mly"
                                   ( Some (List.rev _3) )
# 1338 "parser.ml"
               : 'interfere_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'ids) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : Parsetree.a_proposition) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : Parsetree.a_proposition) in
    Obj.repr(
# 244 "parser.mly"
      ( (_2,_4,a_prop_empty,_7,_10,[],Location.symbol_loc()) )
# 1348 "parser.ml"
               : 'action_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 12 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 10 : 'ids) in
    let _7 = (Parsing.peek_val __caml_parser_env 7 : Parsetree.a_proposition) in
    let _10 = (Parsing.peek_val __caml_parser_env 4 : Parsetree.a_proposition) in
    let _13 = (Parsing.peek_val __caml_parser_env 1 : Parsetree.a_proposition) in
    Obj.repr(
# 249 "parser.mly"
      ( (_2,_4,_7,_10,_13,[],Location.symbol_loc()) )
# 1359 "parser.ml"
               : 'action_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 12 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 10 : 'ids) in
    let _7 = (Parsing.peek_val __caml_parser_env 7 : Parsetree.a_proposition) in
    let _10 = (Parsing.peek_val __caml_parser_env 4 : Parsetree.a_proposition) in
    let _13 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 254 "parser.mly"
      ( (_2,_4,a_prop_empty,_7,_10,List.rev _13,Location.symbol_loc()) )
# 1370 "parser.ml"
               : 'action_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 15 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 13 : 'ids) in
    let _7 = (Parsing.peek_val __caml_parser_env 10 : Parsetree.a_proposition) in
    let _10 = (Parsing.peek_val __caml_parser_env 7 : Parsetree.a_proposition) in
    let _13 = (Parsing.peek_val __caml_parser_env 4 : Parsetree.a_proposition) in
    let _16 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 260 "parser.mly"
      ( (_2,_4,_7,_10,_13,List.rev _16,Location.symbol_loc()) )
# 1382 "parser.ml"
               : 'action_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 262 "parser.mly"
           ( [] )
# 1388 "parser.ml"
               : 'actions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actions) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'action_decl) in
    Obj.repr(
# 262 "parser.mly"
                                        ( _2::_1 )
# 1396 "parser.ml"
               : 'actions))
; (fun __caml_parser_env ->
    Obj.repr(
# 263 "parser.mly"
       ( [] )
# 1402 "parser.ml"
               : 'ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ids_ne) in
    Obj.repr(
# 263 "parser.mly"
                       ( _1 )
# 1409 "parser.ml"
               : 'ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 265 "parser.mly"
                     ( [(_1,Location.rhs_loc 1)] )
# 1416 "parser.ml"
               : 'ids_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ids_ne) in
    Obj.repr(
# 266 "parser.mly"
                       ( (_1,Location.rhs_loc 1)::_3 )
# 1424 "parser.ml"
               : 'ids_ne))
; (fun __caml_parser_env ->
    Obj.repr(
# 268 "parser.mly"
        ( [] )
# 1430 "parser.ml"
               : 'tyids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tyids_ne) in
    Obj.repr(
# 268 "parser.mly"
                          ( _1 )
# 1437 "parser.ml"
               : 'tyids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 270 "parser.mly"
                     ( [(_2,_1,Location.rhs_loc 2)] )
# 1445 "parser.ml"
               : 'tyids_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'tyids_ne) in
    Obj.repr(
# 271 "parser.mly"
                                ( (_2,_1,Location.rhs_loc 2)::_4 )
# 1454 "parser.ml"
               : 'tyids_ne))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'top_stmts) in
    Obj.repr(
# 274 "parser.mly"
                                ( _2 )
# 1461 "parser.ml"
               : 'top_block))
; (fun __caml_parser_env ->
    Obj.repr(
# 277 "parser.mly"
                                ( ([],[]) )
# 1467 "parser.ml"
               : 'top_stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmts) in
    Obj.repr(
# 278 "parser.mly"
                                ( ([], _1 :: List.rev _2) )
# 1475 "parser.ml"
               : 'top_stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'ids_ne) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'top_stmts) in
    Obj.repr(
# 279 "parser.mly"
                                ( (List.map (fun (x,y) -> (x,_1,y)) _2 @ fst _4, snd _4) )
# 1484 "parser.ml"
               : 'top_stmts))
; (fun __caml_parser_env ->
    Obj.repr(
# 281 "parser.mly"
         ( [] )
# 1490 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 281 "parser.mly"
                             ( _2::_1 )
# 1498 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 284 "parser.mly"
                                     ( [(_1, component_of_string ("."^_3), _5)] )
# 1507 "parser.ml"
               : 'fldassigns))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'fldassigns) in
    Obj.repr(
# 285 "parser.mly"
                                                      ( (_1, component_of_string ("."^_3), _5)::_7 )
# 1517 "parser.ml"
               : 'fldassigns))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fldassigns) in
    Obj.repr(
# 288 "parser.mly"
                                   ( mkstm(Pstm_fldassign(_1)) )
# 1524 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_exp) in
    Obj.repr(
# 289 "parser.mly"
                                   ( mkstm(Pstm_assign(_1, _3)) )
# 1532 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 290 "parser.mly"
                                   ( mkstm(Pstm_dispose(_2,exp_one)) )
# 1539 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    Obj.repr(
# 291 "parser.mly"
                                             ( mkstm(Pstm_dispose(_3,_5)) )
# 1547 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 292 "parser.mly"
                                   ( mkstm(Pstm_block(List.rev _2)) )
# 1554 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    Obj.repr(
# 293 "parser.mly"
                                   ( mkstm(Pstm_assume(_3)) )
# 1561 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 294 "parser.mly"
                                   ( mkstm(Pstm_interfere(component_of_string _2,_4)) )
# 1569 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 295 "parser.mly"
                                   ( mkstm(Pstm_exp(_1)) )
# 1576 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'proc_calls) in
    Obj.repr(
# 296 "parser.mly"
                                   ( mkstm(Pstm_parblock(List.rev _3)) )
# 1583 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 297 "parser.mly"
                                   ( mkstm(Pstm_return(None)) )
# 1589 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 298 "parser.mly"
                                   ( mkstm(Pstm_return(Some _2)) )
# 1596 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 299 "parser.mly"
                                   ( mkstm(Pstm_break) )
# 1602 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 300 "parser.mly"
                                   ( mkstm(Pstm_continue) )
# 1608 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 301 "parser.mly"
                                   ( mkstm(Pstm_comment(_2)) )
# 1615 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'opt_exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 302 "parser.mly"
                                               ( mkstm(Pstm_if(_3, _5, mkstm_ghost(Pstm_block []))) )
# 1623 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'opt_exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 303 "parser.mly"
                                               ( mkstm(Pstm_if(_3, _5, _7)) )
# 1632 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'opt_exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'inv_restr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 304 "parser.mly"
                                               ( mkstm(Pstm_while(_5, _3, _6)) )
# 1641 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_when) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 305 "parser.mly"
                                               ( mkstm(Pstm_withres(component_of_string _2,_3,_4,"",[])) )
# 1650 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'opt_when) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'stmt) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'exps) in
    Obj.repr(
# 306 "parser.mly"
                                                              ( mkstm(Pstm_withres(component_of_string _2,_3,_4,_6,_8)) )
# 1661 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'stmt) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'exps) in
    Obj.repr(
# 307 "parser.mly"
                                                              ( mkstm(Pstm_action(_2,component_of_string _4,_6,_8)) )
# 1671 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'actuals) in
    Obj.repr(
# 310 "parser.mly"
                                                  ( (None,_1,_3) )
# 1679 "parser.ml"
               : 'proc_call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'actuals) in
    Obj.repr(
# 311 "parser.mly"
                                                  ( (Some _1,_3,_5) )
# 1688 "parser.ml"
               : 'proc_call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proc_call) in
    Obj.repr(
# 314 "parser.mly"
                          ( [_1] )
# 1695 "parser.ml"
               : 'proc_calls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'proc_calls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'proc_call) in
    Obj.repr(
# 315 "parser.mly"
                          ( _2::_1 )
# 1703 "parser.ml"
               : 'proc_calls))
; (fun __caml_parser_env ->
    Obj.repr(
# 318 "parser.mly"
                           ( mkexp(Pexp_infix("==", mkexp_ghost(Pexp_num 0), mkexp_ghost(Pexp_num 0))) )
# 1709 "parser.ml"
               : 'opt_when))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 319 "parser.mly"
                           ( _3 )
# 1716 "parser.ml"
               : 'opt_when))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 322 "parser.mly"
                                ( mkexp(Pexp_ident(_1)) )
# 1723 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 323 "parser.mly"
                                ( mkexp(Pexp_num(_1)) )
# 1730 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 324 "parser.mly"
                                ( mkexp(Pexp_bool _1) )
# 1737 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 325 "parser.mly"
                                ( _2 )
# 1744 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 326 "parser.mly"
                                ( mkexp(Pexp_cast(_2,_4)) )
# 1752 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 327 "parser.mly"
                                ( mkexp(Pexp_prefix(_1, _2)) )
# 1760 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 328 "parser.mly"
                                ( mkexp(Pexp_prefix(_1, _2)) )
# 1768 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 329 "parser.mly"
                                ( mkexp(Pexp_fld(_1, component_of_string ("."^_3))) )
# 1776 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 330 "parser.mly"
                                ( mkexp(Pexp_new ("any",exp_one)) )
# 1782 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 331 "parser.mly"
                                ( mkexp(Pexp_new (_2,exp_one)) )
# 1789 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 332 "parser.mly"
                                ( mkexp(Pexp_new (_2,_4)) )
# 1797 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 333 "parser.mly"
                                ( mkexp(Pexp_infix("||", _1, _3)) )
# 1805 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 334 "parser.mly"
                                ( mkexp(Pexp_infix("&&", _1, _3)) )
# 1813 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 335 "parser.mly"
                                ( mkexp(Pexp_infix("*", _1, _3)) )
# 1821 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 336 "parser.mly"
                                ( mkexp(Pexp_infix(_2, _1, _3)) )
# 1830 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 337 "parser.mly"
                                ( mkexp(Pexp_infix(_2, _1, _3)) )
# 1839 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 338 "parser.mly"
                                ( mkexp(Pexp_infix(_2, _1, _3)) )
# 1848 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals) in
    Obj.repr(
# 339 "parser.mly"
                                ( mkexp(Pexp_fcall(_1, _3)) )
# 1856 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exps) in
    Obj.repr(
# 340 "parser.mly"
                                ( mkexp(Pexp_fun(_1, _3)) )
# 1864 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 343 "parser.mly"
                  ( None )
# 1870 "parser.ml"
               : 'opt_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 344 "parser.mly"
                  ( Some _1 )
# 1877 "parser.ml"
               : 'opt_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 347 "parser.mly"
                  ( [] )
# 1883 "parser.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exps_ne) in
    Obj.repr(
# 348 "parser.mly"
                  ( _1 )
# 1890 "parser.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 351 "parser.mly"
                   ( [_1] )
# 1897 "parser.ml"
               : 'exps_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exps_ne) in
    Obj.repr(
# 352 "parser.mly"
                      ( _1::_3 )
# 1905 "parser.ml"
               : 'exps_ne))
; (fun __caml_parser_env ->
    Obj.repr(
# 355 "parser.mly"
                 ( [] )
# 1911 "parser.ml"
               : 'a_exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'a_exps_ne) in
    Obj.repr(
# 356 "parser.mly"
                 ( _1 )
# 1918 "parser.ml"
               : 'a_exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'a_exp) in
    Obj.repr(
# 359 "parser.mly"
                          ( [_1] )
# 1925 "parser.ml"
               : 'a_exps_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'a_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'a_exps_ne) in
    Obj.repr(
# 360 "parser.mly"
                          ( _1::_3 )
# 1933 "parser.ml"
               : 'a_exps_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tyids) in
    Obj.repr(
# 363 "parser.mly"
                        ( ([],_1) )
# 1940 "parser.ml"
               : 'formals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tyids) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tyids) in
    Obj.repr(
# 364 "parser.mly"
                     ( (_1,_3) )
# 1948 "parser.ml"
               : 'formals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exps) in
    Obj.repr(
# 367 "parser.mly"
                   ( ([],_1) )
# 1955 "parser.ml"
               : 'actuals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exps) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exps) in
    Obj.repr(
# 368 "parser.mly"
                   ( (mk_ref_params _1 (Location.rhs_loc 1), _3) )
# 1963 "parser.ml"
               : 'actuals))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Parsetree.a_proposition) in
    Obj.repr(
# 371 "parser.mly"
                                 ( _2 )
# 1970 "parser.ml"
               : Parsetree.a_proposition))
; (fun __caml_parser_env ->
    Obj.repr(
# 372 "parser.mly"
                                 ( a_prop_empty )
# 1976 "parser.ml"
               : Parsetree.a_proposition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'a_exp) in
    Obj.repr(
# 373 "parser.mly"
                                 ( Aprop_exp _1)
# 1983 "parser.ml"
               : Parsetree.a_proposition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'a_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'a_fields) in
    Obj.repr(
# 374 "parser.mly"
                                 ( Aprop_node(component_of_string "Node",_1,_3) )
# 1991 "parser.ml"
               : Parsetree.a_proposition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'a_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'a_exp) in
    Obj.repr(
# 375 "parser.mly"
                                 ( Aprop_node(component_of_string "Node",_1,[(Misc.list_link_tag, _3)]) )
# 1999 "parser.ml"
               : Parsetree.a_proposition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'a_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Parsetree.a_proposition) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Parsetree.a_proposition) in
    Obj.repr(
# 376 "parser.mly"
                                 ( Aprop_ifthenelse(_2,_4,_6) )
# 2008 "parser.ml"
               : Parsetree.a_proposition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Parsetree.a_proposition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Parsetree.a_proposition) in
    Obj.repr(
# 377 "parser.mly"
                                 ( Aprop_star(_1,_3) )
# 2016 "parser.ml"
               : Parsetree.a_proposition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Parsetree.a_proposition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Parsetree.a_proposition) in
    Obj.repr(
# 378 "parser.mly"
                                 ( Aprop_barbar(_1,_3) )
# 2024 "parser.ml"
               : Parsetree.a_proposition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Parsetree.a_proposition) in
    Obj.repr(
# 379 "parser.mly"
                                            ( Aprop_box (component_of_string _1, _4) )
# 2032 "parser.ml"
               : Parsetree.a_proposition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'a_exps) in
    Obj.repr(
# 380 "parser.mly"
                                            ( Aprop_indpred(_1,[],_3,Location.symbol_loc()) )
# 2040 "parser.ml"
               : Parsetree.a_proposition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'a_exps) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'a_exps) in
    Obj.repr(
# 381 "parser.mly"
                                            ( Aprop_indpred(_1,mk_indpred_params _3,_5,Location.symbol_loc()) )
# 2049 "parser.ml"
               : Parsetree.a_proposition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'a_exp) in
    Obj.repr(
# 384 "parser.mly"
                                 ( _2 )
# 2056 "parser.ml"
               : 'a_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 385 "parser.mly"
                                 ( mkexp(Pexp_ident(_1)) )
# 2063 "parser.ml"
               : 'a_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 386 "parser.mly"
                                 ( mkexp(Pexp_ident(_1)) )
# 2070 "parser.ml"
               : 'a_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 387 "parser.mly"
                                 ( mkexp(Pexp_num(_1)) )
# 2077 "parser.ml"
               : 'a_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 388 "parser.mly"
                                 ( mkexp(Pexp_bool(_1)) )
# 2084 "parser.ml"
               : 'a_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'a_exps) in
    Obj.repr(
# 389 "parser.mly"
                                 ( mkexp(Pexp_fun(_1,_3)) )
# 2092 "parser.ml"
               : 'a_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 390 "parser.mly"
                                 ( mkexp(Pexp_prefix(_1, _2)) )
# 2100 "parser.ml"
               : 'a_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'a_exp) in
    Obj.repr(
# 391 "parser.mly"
                                 ( mkexp(Pexp_prefix(_1, _2)) )
# 2108 "parser.ml"
               : 'a_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'a_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'a_exp) in
    Obj.repr(
# 392 "parser.mly"
                                 ( mkexp(Pexp_infix("&&",_1,_3)) )
# 2116 "parser.ml"
               : 'a_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'a_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'a_exp) in
    Obj.repr(
# 393 "parser.mly"
                                 ( mkexp(Pexp_infix(_2,_1,_3)) )
# 2125 "parser.ml"
               : 'a_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'a_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'a_exp) in
    Obj.repr(
# 394 "parser.mly"
                                 ( mkexp(Pexp_infix(_2,_1,_3)) )
# 2134 "parser.ml"
               : 'a_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'a_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'a_exp) in
    Obj.repr(
# 395 "parser.mly"
                                 ( mkexp(Pexp_infix(_2,_1,_3)) )
# 2143 "parser.ml"
               : 'a_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 398 "parser.mly"
                 ( [] )
# 2149 "parser.ml"
               : 'a_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'a_fields_ne) in
    Obj.repr(
# 399 "parser.mly"
                 ( _1 )
# 2156 "parser.ml"
               : 'a_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'a_exp) in
    Obj.repr(
# 402 "parser.mly"
                                        ( [(component_of_string ("."^_1),_3)] )
# 2164 "parser.ml"
               : 'a_fields_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'a_exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'a_fields_ne) in
    Obj.repr(
# 403 "parser.mly"
                                        ( (component_of_string ("."^_1),_3)::_5 )
# 2173 "parser.ml"
               : 'a_fields_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'qualifier_list) in
    Obj.repr(
# 411 "parser.mly"
      ( _1 )
# 2180 "parser.ml"
               : Parsetree.qualifier_declaration list))
; (fun __caml_parser_env ->
    Obj.repr(
# 415 "parser.mly"
      ( [] )
# 2186 "parser.ml"
               : 'qualifier_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'qualifier_pattern_declaration) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'qualifier_list) in
    Obj.repr(
# 417 "parser.mly"
      ( _2::_3 )
# 2194 "parser.ml"
               : 'qualifier_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'qual_ty_anno) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'qualifier_pattern) in
    Obj.repr(
# 421 "parser.mly"
    ( (_1, mkqpat(_3, _6, _9)) )
# 2204 "parser.ml"
               : 'qualifier_pattern_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'qualifier_pattern) in
    Obj.repr(
# 423 "parser.mly"
    ( (_1, mkqpat(_3, [], _6))  )
# 2213 "parser.ml"
               : 'qualifier_pattern_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 427 "parser.mly"
    ( [(_1, _3)] )
# 2221 "parser.ml"
               : 'qual_ty_anno))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'qual_ty_anno) in
    Obj.repr(
# 429 "parser.mly"
    ( (_1, _3)::_5 )
# 2230 "parser.ml"
               : 'qual_ty_anno))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 433 "parser.mly"
                                            ( if (_1) then mkpredpat Ppredpat_true else 
																								mkpredpat (Ppredpat_not (mkpredpat Ppredpat_true))
																						)
# 2239 "parser.ml"
               : 'qualifier_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'qualifier_pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'qualifier_pattern) in
    Obj.repr(
# 436 "parser.mly"
                                                   ( mkpredpat (Ppredpat_and(_1, _3)) )
# 2247 "parser.ml"
               : 'qualifier_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'qualifier_pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'qualifier_pattern) in
    Obj.repr(
# 437 "parser.mly"
                                                ( mkpredpat (Ppredpat_or(_1, _3)) )
# 2255 "parser.ml"
               : 'qualifier_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qualifier_pattern) in
    Obj.repr(
# 439 "parser.mly"
                                           ( mkpredpat (Ppredpat_not(_2)) )
# 2263 "parser.ml"
               : 'qualifier_pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'qualifier_pattern) in
    Obj.repr(
# 440 "parser.mly"
                                            ( _2 )
# 2270 "parser.ml"
               : 'qualifier_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'qual_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'qual_rel) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'qual_expr) in
    Obj.repr(
# 442 "parser.mly"
      ( mkpredpat (Ppredpat_atom(_1, _2, _3)) )
# 2279 "parser.ml"
               : 'qualifier_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'qual_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'qual_expr) in
    Obj.repr(
# 444 "parser.mly"
     ( mkpredpat (Ppredpat_in (_1, _3)) )
# 2287 "parser.ml"
               : 'qualifier_pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'qual_expr) in
    Obj.repr(
# 446 "parser.mly"
     ( mkpredpat (Ppredpat_predrec (_2, _4)) )
# 2295 "parser.ml"
               : 'qualifier_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'qualifier_pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'qualifier_pattern) in
    Obj.repr(
# 448 "parser.mly"
   ( mkpredpat (Ppredpat_or (mkpredpat (Ppredpat_not(_1)), _3)) )
# 2303 "parser.ml"
               : 'qualifier_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_lit_rel) in
    Obj.repr(
# 452 "parser.mly"
                                            ( [_1] )
# 2310 "parser.ml"
               : 'qual_rel))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'qual_rel_list) in
    Obj.repr(
# 453 "parser.mly"
                                            ( _2 )
# 2317 "parser.ml"
               : 'qual_rel))
; (fun __caml_parser_env ->
    Obj.repr(
# 455 "parser.mly"
    ( [] )
# 2323 "parser.ml"
               : 'qual_rel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 459 "parser.mly"
    (   if _1 = "<=" then Pred_le
        else if _1 = "!=" then Pred_ne
				else if _1 = ">=" then Pred_ge
        else if _1 = "==" then Pred_eq
        else if _1 = "<" then Pred_lt
        else if _1 = ">" then Pred_gt
        else raise Parse_error
    )
# 2337 "parser.ml"
               : 'qual_lit_rel))
; (fun __caml_parser_env ->
    Obj.repr(
# 467 "parser.mly"
                                            ( Pred_eq )
# 2343 "parser.ml"
               : 'qual_lit_rel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_lit_rel) in
    Obj.repr(
# 470 "parser.mly"
                                            ( [_1] )
# 2350 "parser.ml"
               : 'qual_rel_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'qual_lit_rel) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'qual_rel_list) in
    Obj.repr(
# 471 "parser.mly"
                                            ( _1::_3 )
# 2358 "parser.ml"
               : 'qual_rel_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'qual_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'qual_op) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'qual_expr_1) in
    Obj.repr(
# 476 "parser.mly"
    ( mkpredpatexp (Ppredpatexp_binop(_1, _2, _3)) )
# 2367 "parser.ml"
               : 'qual_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'qual_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'qual_expr_1) in
    Obj.repr(
# 478 "parser.mly"
  ( mkpredpatexp (Ppredpatexp_union(_1, _3)) )
# 2375 "parser.ml"
               : 'qual_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'qual_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'qual_expr_1) in
    Obj.repr(
# 480 "parser.mly"
   ( mkpredpatexp (Ppredpatexp_concat(_1, _3)) )
# 2383 "parser.ml"
               : 'qual_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_expr_1) in
    Obj.repr(
# 481 "parser.mly"
                                            ( _1 )
# 2390 "parser.ml"
               : 'qual_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'qual_term_list) in
    Obj.repr(
# 485 "parser.mly"
    ( mkpredpatexp (Ppredpatexp_funapp(_1, _3)) )
# 2398 "parser.ml"
               : 'qual_expr_1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_term) in
    Obj.repr(
# 486 "parser.mly"
                                            ( _1 )
# 2405 "parser.ml"
               : 'qual_expr_1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'qual_expr) in
    Obj.repr(
# 489 "parser.mly"
                                            ( _2 )
# 2412 "parser.ml"
               : 'qual_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 491 "parser.mly"
    ( mkpredpatexp (Ppredpatexp_var([ _1 ])) )
# 2419 "parser.ml"
               : 'qual_term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'qual_litident_list) in
    Obj.repr(
# 493 "parser.mly"
    ( mkpredpatexp (Ppredpatexp_var(_2)) )
# 2426 "parser.ml"
               : 'qual_term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 495 "parser.mly"
    ( mkpredpatexp (Ppredpatexp_mvar(_2)) )
# 2433 "parser.ml"
               : 'qual_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 497 "parser.mly"
    ( mkpredpatexp (Ppredpatexp_int([_1])) )
# 2440 "parser.ml"
               : 'qual_term))
; (fun __caml_parser_env ->
    Obj.repr(
# 499 "parser.mly"
    ( mkpredpatexp (Ppredpatexp_any_int) )
# 2446 "parser.ml"
               : 'qual_term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'qual_intlist) in
    Obj.repr(
# 501 "parser.mly"
    ( mkpredpatexp (Ppredpatexp_int(_2)) )
# 2453 "parser.ml"
               : 'qual_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'qual_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 503 "parser.mly"
    ( mkpredpatexp (Ppredpatexp_field(_3, _1)) )
# 2461 "parser.ml"
               : 'qual_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'qual_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 505 "parser.mly"
    ( mkpredpatexp (Ppredpatexp_proj(_3, _1)) )
# 2469 "parser.ml"
               : 'qual_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 509 "parser.mly"
                                            ( [_1] )
# 2476 "parser.ml"
               : 'qual_intlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'qual_intlist) in
    Obj.repr(
# 510 "parser.mly"
                                            ( _1::_3 )
# 2484 "parser.ml"
               : 'qual_intlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'qual_litident_list) in
    Obj.repr(
# 514 "parser.mly"
                                    ( _1 :: _3 )
# 2492 "parser.ml"
               : 'qual_litident_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 515 "parser.mly"
                                    ( [ _1 ] )
# 2499 "parser.ml"
               : 'qual_litident_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_term) in
    Obj.repr(
# 519 "parser.mly"
                                            ( [_1] )
# 2506 "parser.ml"
               : 'qual_term_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'qual_term) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qual_term_list) in
    Obj.repr(
# 520 "parser.mly"
                                            ( _1::_2 )
# 2514 "parser.ml"
               : 'qual_term_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_lit_op) in
    Obj.repr(
# 524 "parser.mly"
                                               ( [_1]  )
# 2521 "parser.ml"
               : 'qual_op))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'qual_lit_op_list) in
    Obj.repr(
# 525 "parser.mly"
                                               ( _2 )
# 2528 "parser.ml"
               : 'qual_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 527 "parser.mly"
    ( [] )
# 2534 "parser.ml"
               : 'qual_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 531 "parser.mly"
  ( match _1 with
			| "+" -> Predexp_plus
			| "-" -> Predexp_minus 
			| _ -> raise Parse_error)
# 2544 "parser.ml"
               : 'qual_lit_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 535 "parser.mly"
                                            ( Predexp_times )
# 2550 "parser.ml"
               : 'qual_lit_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 537 "parser.mly"
    (  match _1 with 
			  "/" -> Predexp_div 
      | "*" -> Predexp_times
      | _ -> raise Parse_error )
# 2560 "parser.ml"
               : 'qual_lit_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_lit_op) in
    Obj.repr(
# 543 "parser.mly"
                                            ( [_1] )
# 2567 "parser.ml"
               : 'qual_lit_op_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'qual_lit_op) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'qual_lit_op_list) in
    Obj.repr(
# 544 "parser.mly"
                                            ( _1::_3 )
# 2575 "parser.ml"
               : 'qual_lit_op_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry assn *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry qualifiers *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Parsetree.p_program)
let assn (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Parsetree.a_proposition)
let qualifiers (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Parsetree.qualifier_declaration list)
;;
# 547 "parser.mly"
 (* trailer *)
# 2610 "parser.ml"
