// Vechev & Yahav CAS linked list.
//
// See Figure 2 of
//
//    O'Hearn, Rinetzky, Vechev, Yahav, Yorsh.
//    Verifying linearizability with hindsight.
//    Queen Mary University of London Technical Report. 2010.
//

// The verification of Optimistic set enjoys Hindsight lemma.

#include "set_spec.cav"

class Node {
  int val;
  bool marked;
  Node next;
}

Node Head, Tail;

resource r() {
  // Specify the filtering function: 
  //	all reachable nodes are considered data structure elements
  //    i.e., if e is in the data structure (vals (Head)), 
  //		  e is a reachable element.
  setspec e << vals (Head) => $$ Reach (e)
  constructor {
    Head = new();
    Head->val = -12345;
    Head->marked = false;
    Tail = new();
    Tail->val = 12345;
    Tail->marked = false;
    Tail->next = 0;
    Head->next = Tail;
  }
}

// ---------------------------------------------------------
// Is the element in the set?
// ---------------------------------------------------------

bool contains(int key) 
// Specify a precondition
requires -12345 < key && key < 12345
// Specify the pure behavior of this method: 
//	if key is in the data structure, return 1
//	if key is not in the data structure, return 0 
purespec r (key << vals (Head.post) => Result = 1 && (!(key << vals (Head.post))) => Result = 0)
// This method has no effectful behavior
effspec r (false)
{
  Node pred, curr;
  int k;
  
  
  // assume (! @can_return(1)); // DEBUG HACK

  pred = Head;
  with r { curr = Head->next; k = curr->val; }

  while (k < key) {
    pred = curr;
    
    with r { curr = curr->next; k = curr->val; }
  }

  if (k == key) return true;
  else { assume (k > key); return false; }

}


// ---------------------------------------------------------
// Insert an element into the set
// ---------------------------------------------------------

bool add(int key)
// Specify a precondition
requires -12345 < key && key < 12345
// Specify the pure behavior of this method: 
//	if key is already in the data structure, return 0 
purespec r (key << vals (Head.post) => Result = 0)
// Specify the effectful behavior of add method
// i.e., the union of key and the pre-state of the data structure
// equals to the post-state of the data structure. 
effspec r (key ++ vals (Head.pre) = vals (Head.post) ) 
{
  Node pred, curr, entry;
  int k;
  int k3; // <-- HACK: Make abstraction remember pred->val

  while (true) {

    pred = Head;
    with r { curr = Head->next; 
    k3 = -12345;
     k = curr->val; }
  
    while (k < key) {
      pred = curr;
      k3 = k;
      with r { curr = curr->next; k = curr->val; }
    }

    if (k == key) return false;

    entry = new();
    entry->val = key;
    entry->marked = false;
    entry->next = curr;
 
    with r { 
      if (pred->next == curr && !pred->marked) {
         pred->next = entry;
         k3 = k3;
         return true;
      } 
    } 
  }
}


// ---------------------------------------------------------
// Remove an element from the set
// ---------------------------------------------------------

bool remove(int key)
// Specify a precondition
requires -12345 < key && key < 12345
// Specify the pure behavior of this method: 
//	if key is not in the data structure, return 0 
purespec r ((!(key << vals (Head.post))) => Result = 0)
// Specify the effectful behavior of remove method
// i.e., the union of key and the post-state of the data structure
// equals to the pre-state of the data structure.
// note: there are no duplicates in the data structure.
effspec r (key ++ vals (Head.post) = vals (Head.pre) ) 
{
  Node pred, curr, next;
  int k;

  while (true) {

    pred = Head;
    with r { curr = Head->next;  k = curr->val; }
  
    while (k < key) {
      pred = curr;
      with r { curr = curr->next; 
       k = curr->val; }
    }

    if (k > key) return false;

    with r { 
      if (pred->next == curr && !pred->marked) {
        next = curr->next;
        curr->marked = true, pred->next = next;
        return true;
      }
    } 
  }
}
