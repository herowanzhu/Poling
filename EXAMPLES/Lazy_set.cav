/* Faithfully encoding of the lazy set algorithm */

// The verification of Lazy set enjoys Hindsight lemma.

class Node {
  thread_id lk;
  int val;
  bool marked;
  Node next;
}

Node Head, Tail;

resource r() {
  // Specify the filtering function: 
  //	all reachable non-marked nodes are considered data structure elements
  //    i.e., if e is in the data structure (vals (Head)), 
  //		  e is a reachable element and the marked field of e is set to 0.
  setspec e << vals (Head) => ($$ Reach (e) && marked (e) = 0	)
  constructor {
    Tail = new();
    Tail->val = 12345;
    Tail->next = 0;
    Head = new();
    Head->val = -12345;
    Head->next = Tail;
  }
}

bool contains(int key) 
// Specify a precondition
requires -12345 < key && key < 12345
// Specify the pure behavior of contains method: 
//	if key is in the data structure, return 1
//	if key is not in the data structure, return 0 
purespec r (key << vals (Head.post) => Result = 1 && (!(key << vals (Head.post))) => Result = 0)
// This method has no effectful behavior
effspec r (false)
{
	Node pred, curr;
  	int k;
  	bool b1;
  
	pred = Head;
  	with r { curr = Head->next; k = curr->val; }

  	while (k < key) {
    	pred = curr;
    	with r { curr = curr->next; k = curr->val; b1 = curr->marked;}
  	}

  	if (k == key && !b1) return true;
  	else if (k == key && b1) return false;
  	else { assume (k > key); return false; }
}


bool add (int key) 
// Specify a precondition
requires -12345 < key && key < 12345
// Specify the pure behavior of this method: 
//	if key is already in the data structure, return 0 
purespec r (key << vals (Head.post) => Result = 0)
// Specify the effectful behavior of add method:
//   1. key is successfully added into the data structure
//   i.e., the union of key and the pre-state of the data structure
//   equals to the post-state of the data structure.
//	 2. If the input data structure is sorted, the output data structure is also sorted
effspec r (key ++ vals (Head.pre) = vals (Head.post) && ($$ sorted(Head.pre) => $$ sorted (Head.post))) 
{
	Node pred, curr, entry;
  	int k;
  	int k3; // <-- HACK: Make abstraction remember pred->val
  	
  	int b1;
  	
  	bool pmarked, cmarked;

  	while (true) {
    	pred = Head;
    	with r { curr = Head->next; k3 = -12345; k = curr->val; pmarked = pred->marked; cmarked = curr->marked; 
    	if (pred->next == curr) b1 = 1; else b1 = 0;}
  
    	while (k < key) {
      		pred = curr;
      		k3 = k;
      		with r { curr = curr->next; k = curr->val; pmarked = pred->marked; cmarked = curr->marked; }
    	}
    	
   		// lock 
		with r when (pred->lk == 0) { pred->lk = TID; }
		with r when (curr->lk == 0) { curr->lk = TID; }
		
	 	with r { if (!pred->marked && !curr->marked && pred->next == curr) b1 = 1; else b1 = 0; }
		
		if (b1 != 0) {
    		if (k == key) {
    			// unlock
				with r { pred->lk = 0; }
    			with r { curr->lk = 0; }   	
    			assume (k == key && !pmarked && !cmarked);   // HACK ----- Abstraction will forget k and key	
    			return false;
			}
			else {
				entry = new();
   	 			entry->val = key;
    			entry->marked = false;
    			entry->next = curr;
    			
    			with r {
    				pred->next = entry;
    				k3 = k3;
    		   	}
         		
         		// unlock
         		with r { pred->lk = 0; }
   	 			with r { curr->lk = 0; }
   	 			assume (k > key); //  HACK --- Abstraction will forget k and key
         		return true;
			}
    	}
	}
}


bool remove(int key) 
// Specify a precondition
requires -12345 < key && key < 12345
// Specify the pure behavior of this method: 
//	if key is not in the data structure, return 0 
purespec r ((!(key << vals (Head.post))) => Result = 0)
// Specify the effectful behavior of remove method:
//   1. key is successfully removed from the data structure
//   i.e., the union of key and the post-state of the data structure
//   equals to the pre-state of the data structure.
//   note: there are no duplicates in the data structure.
//	 2. If the input data structure is sorted, the output data structure is also sorted
effspec r (key ++ vals (Head.post) = vals (Head.pre) && ($$ sorted(Head.pre) => $$ sorted (Head.post))) 
{
	Node pred, curr, next;
  	int k;
  	int b1;
  	
  	bool pmarked, cmarked;

  	while (true) {

    	pred = Head;
    	with r { curr = Head->next;  k = curr->val; pmarked = pred->marked; cmarked = curr->marked;}
  
    	while (k < key) {
      		pred = curr;
    		with r { curr = curr->next; 
       		k = curr->val; pmarked = pred->marked; cmarked = curr->marked;}
    	}
    	
    	// lock 
		with r when (pred->lk == 0) { pred->lk = TID; }
		with r when (curr->lk == 0) { curr->lk = TID; }
		
		with r { if (!pred->marked && !curr->marked && pred->next == curr) b1 = 1; else b1 = 0; }
		

		if (b1 != 0) {
    		if (k > key) {
    			// unlock
    			with r { pred->lk = 0; }
   	 			with r { curr->lk = 0; }
   	 			assume (k > key);  // HACK ----- Abstraction will forget k and key
    			return false;
    		}
    		else {
    			with r {
    				next = curr->next;
        			curr->marked = true;
        			pred->next = next;
        		}
        		// unlock
        		with r { pred->lk = 0; }
   	 			with r { curr->lk = 0; }
   	 			assume (k == key);  // HACK ---- Abstraction will forget k and key
        		return true;
    		}
		}
	}
}